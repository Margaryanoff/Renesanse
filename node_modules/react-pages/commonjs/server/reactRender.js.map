{"version":3,"file":"reactRender.js","names":["USE_REACT_18_API","createRenderingStream","pageElement","renderToPipeableStream","error","stream","Stream","onCompleteShell","emit","pipe","onError","_error","console","abort","renderToNodeStream"],"sources":["../../lib/server/reactRender.js"],"sourcesContent":["import { renderToPipeableStream, renderToNodeStream } from 'react-dom/server'\r\n\r\nimport Stream from './stream.js'\r\n\r\n//-------------------------------------------------------------------\r\n// React 18 things not implemented:\r\n//-------------------------------------------------------------------\r\n// Because the new \"Suspense\" feature could change Redux state during render,\r\n// Redux state snapshot will have to be appended after the rendered page,\r\n// not before it, as it currently is, because the state could change during render.\r\n//\r\n// Currently, it creates readable streams for `[beforeContent, afterContent]`\r\n// before starting the rendering of the page content.\r\n// Redux state is written in `afterContent`.\r\n// So, a React 18 implementation will have to listen for the React rendering stream's\r\n// \"end\" and only then generate `afterContent`.\r\n// See `render.js` for the place where `afterContent` is generated.\r\n//\r\n// In case `renderToNodeStream` gets deprecated, it could use `renderToString`.\r\n//-------------------------------------------------------------------\r\nconst USE_REACT_18_API = false\r\n\r\nexport function createRenderingStream(pageElement) {\r\n\t// `ReactDOM.renderToPipeableStream()` is available since React 18.\r\n\t// https://github.com/reactwg/react-18/discussions/22\r\n\tif (renderToPipeableStream && USE_REACT_18_API) {\r\n\t\t// Copy-pasted from:\r\n\t\t// https://codesandbox.io/s/github/facebook/react/tree/master/fixtures/ssr2?file=/server/render.js\r\n\t\tlet error\r\n\t\tconst stream = new Stream()\r\n\t\tconst { pipe, abort } = renderToPipeableStream(pageElement, {\r\n\t\t\t// React will be ready to stream earlier than this for things like preload tags.\r\n\t\t\t// However, it wonâ€™t be ready to stream the root body tag and shell until it reaches\r\n\t\t\t// the first Suspense boundary.\r\n\t\t\tonCompleteShell() {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\treturn stream.emit('error', error)\r\n\t\t\t\t}\r\n\t\t\t\tpipe(stream)\r\n\t\t\t},\r\n\t\t\tonError(_error) {\r\n\t\t\t\terror = _error\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn stream;\r\n\t}\r\n\treturn renderToNodeStream(pageElement)\r\n}"],"mappings":";;;;;;AAAA;AAEA;AAAgC;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,gBAAgB,GAAG,KAAK;AAEvB,SAASC,qBAAqB,CAACC,WAAW,EAAE;EAClD;EACA;EACA,IAAIC,8BAAsB,IAAIH,gBAAgB,EAAE;IAC/C;IACA;IACA,IAAII,KAAK;IACT,IAAMC,MAAM,GAAG,IAAIC,kBAAM,EAAE;IAC3B,4BAAwB,IAAAH,8BAAsB,EAACD,WAAW,EAAE;QAC3D;QACA;QACA;QACAK,eAAe,6BAAG;UACjB,IAAIH,KAAK,EAAE;YACV,OAAOC,MAAM,CAACG,IAAI,CAAC,OAAO,EAAEJ,KAAK,CAAC;UACnC;UACAK,IAAI,CAACJ,MAAM,CAAC;QACb,CAAC;QACDK,OAAO,mBAACC,MAAM,EAAE;UACfP,KAAK,GAAGO,MAAM;UACdC,OAAO,CAACR,KAAK,CAACA,KAAK,CAAC;QACrB;MACD,CAAC,CAAC;MAdMK,IAAI,yBAAJA,IAAI;MAAEI,KAAK,yBAALA,KAAK;IAenB,OAAOR,MAAM;EACd;EACA,OAAO,IAAAS,0BAAkB,EAACZ,WAAW,CAAC;AACvC"}