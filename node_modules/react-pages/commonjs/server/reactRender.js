"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderingStream = createRenderingStream;
var _server = require("react-dom/server");
var _stream = _interopRequireDefault(require("./stream.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
//-------------------------------------------------------------------
// React 18 things not implemented:
//-------------------------------------------------------------------
// Because the new "Suspense" feature could change Redux state during render,
// Redux state snapshot will have to be appended after the rendered page,
// not before it, as it currently is, because the state could change during render.
//
// Currently, it creates readable streams for `[beforeContent, afterContent]`
// before starting the rendering of the page content.
// Redux state is written in `afterContent`.
// So, a React 18 implementation will have to listen for the React rendering stream's
// "end" and only then generate `afterContent`.
// See `render.js` for the place where `afterContent` is generated.
//
// In case `renderToNodeStream` gets deprecated, it could use `renderToString`.
//-------------------------------------------------------------------
var USE_REACT_18_API = false;
function createRenderingStream(pageElement) {
  // `ReactDOM.renderToPipeableStream()` is available since React 18.
  // https://github.com/reactwg/react-18/discussions/22
  if (_server.renderToPipeableStream && USE_REACT_18_API) {
    // Copy-pasted from:
    // https://codesandbox.io/s/github/facebook/react/tree/master/fixtures/ssr2?file=/server/render.js
    var error;
    var stream = new _stream["default"]();
    var _renderToPipeableStre = (0, _server.renderToPipeableStream)(pageElement, {
        // React will be ready to stream earlier than this for things like preload tags.
        // However, it wonâ€™t be ready to stream the root body tag and shell until it reaches
        // the first Suspense boundary.
        onCompleteShell: function onCompleteShell() {
          if (error) {
            return stream.emit('error', error);
          }
          pipe(stream);
        },
        onError: function onError(_error) {
          error = _error;
          console.error(error);
        }
      }),
      pipe = _renderToPipeableStre.pipe,
      abort = _renderToPipeableStre.abort;
    return stream;
  }
  return (0, _server.renderToNodeStream)(pageElement);
}
//# sourceMappingURL=reactRender.js.map