"use strict";

var _parseDates = _interopRequireDefault(require("./parseDates.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
describe('parseDates', function () {
  it('should parse dates correctly', function () {
    var object = {
      date: '2016-12-13T22:56:48.417Z',
      dates: ['2016-08-27T03:49:00.123Z'],
      nonDates: ['2011', '2011-01', '2011-01-01',
      // No seconds
      '2011-01-01T03:49Z', '2016-08-27T03:49Z',
      // No milliseconds
      '2016-08-27T03:49:00Z', '2016-08-27T03:49:00.1Z', '2016-08-27T03:49:00.10Z',
      // Weird time zone
      '2016-08-27T03:49:00-03', '2016-08-27T03:49:00+03', '2016-08-27T03:49:00+03:00', '2016-08-27T03:49:00+0300', '2016-08-27T21:12:24.506+03', '2016-08-27T21:12:24.506-03',
      // Lowercase time zone
      '2016-12-13T22:56:48.417z',
      // Invalid month
      '2011-15-30T03:49:00Z',
      // Invalid day
      '2011-12-32T03:49:00Z', '2016-08-27T03', '2016-08-27T03Z', '2016-08-27T03:49', '2016-08-27T03:49:00', '2016-08-27T03:49:00.1', '2016-08-27T03:49:00.123', '2016-08-27 03:49:00+03', '2016-08-27 03:49:00+03:00', '2016-08-27 03:49:00+0300', '2016-08-27 21:12:24.506+03', '2016-08-27 21:12:24.506-03', '2016-12-13T22:56:48.417']
    };
    (0, _parseDates["default"])(object);
    expect(object.date).to.be.an["instanceof"](Date);
    var _iterator = _createForOfIteratorHelper(object.dates),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var date = _step.value;
        expect(date).to.be.an["instanceof"](Date);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var _iterator2 = _createForOfIteratorHelper(object.nonDates),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var nonDate = _step2.value;
        expect(nonDate).to.be.a('string');
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  });
});
//# sourceMappingURL=parseDates.test.js.map