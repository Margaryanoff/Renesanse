"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = updateMeta;
var _compact = _interopRequireDefault(require("lodash/compact.js"));
var _BrowserDocument = _interopRequireDefault(require("./BrowserDocument.js"));
var _normalizeMeta = _interopRequireDefault(require("./normalizeMeta.js"));
var _expandArrays = _interopRequireDefault(require("./expandArrays.js"));
var _expandObjects = _interopRequireDefault(require("./expandObjects.js"));
var _escapeHtml = _interopRequireDefault(require("../escapeHtml.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var browserDocument = new _BrowserDocument["default"]();

// Instead of the old `patchMeta()` (exported as `updateMeta()`) function,
// developers could see if the new automatically-updated `.meta()`
// with `useSelector` parameter works.
/**
 * (advanced) (hacking around)
 * This client-side-only function is expored from this library
 * as an `updateMeta()` function. It could be used to "patch"
 * the latest applied `meta` for whatever reason.
 *
 * For example, one project required this type of function when
 * migrating `load()` methods from always being handled by this library
 * to being sometimes handled in a React's `useEffect()` hook
 * as a possible "user experience" enhancement.
 *
 * Another use case would be somehow changing the page's `title`
 * after some additional user-specific data has been loaded in a
 * React's `useEffect()` hook.
 *
 * Or, for example, when `<title/>` gets updated with the count of
 * unread notifications.
 */
// export function patchMeta(metaProperties) {
// 	updateMeta({
// 		...window._ReactPages_Page_Meta,
// 		...metaProperties
// 	})
// }

/**
 * Updates `<title/>` and `<meta/>` tags (inside `<head/>`).
 */
function updateMeta(meta) {
  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : browserDocument;
  // `patchMeta()` function is not exported in the new version of this library.
  // // Keep a reference to the latest applied `meta`
  // // in order for the `patchMeta()` public exported function to work.
  // // The public exported `patchMeta()` function is not the same as
  // // this `updateMeta()` function.
  // //
  // // Tests don't have a `window` global variable.
  // if (typeof window !== 'undefined') {
  // 	window._ReactPages_Page_Meta = meta
  // }

  var _meta = meta,
    title = _meta.title,
    charset = _meta.charset;
  meta = (0, _normalizeMeta["default"])(meta);

  // Get all `<meta/>` tags.
  // (will be mutated)
  var metaTags = document.getMetaTags();

  // Update `<title/>`.
  if (title && document.getTitle() !== title) {
    document.setTitle(title);
  }

  // Update `<meta charset/>`.
  if (charset) {
    updateMetaTag(document, metaTags, 'charset', charset);
  }

  // Update existing `<meta/>` tags.
  // (removing them from `metaTags` array)
  var newMetaTags = (0, _compact["default"])(meta.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];
    if (!updateMetaTag(document, metaTags, key, value)) {
      return [key, value];
    }
  }));

  // Delete no longer existent `<meta/>` tags.
  metaTags.forEach(document.removeMetaTag);

  // Create new `<meta/>` tags.
  var _iterator = _createForOfIteratorHelper(newMetaTags),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      document.addMetaTag(key, value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

/**
 * Updates `<meta/>` tag to a new `value` and removes it from `metaTags`.
 * @param {Document} document - `BrowserDocument` or `TestDocument`.
 * @return {boolean?}
 */
function updateMetaTag(document, metaTags, name, value) {
  var i = 0;
  while (i < metaTags.length) {
    var meta_tag = metaTags[i];
    if (document.isMetaTag(meta_tag, name)) {
      // Update `<meta/>` tag `value`.
      if (document.getMetaTagValue(meta_tag) !== value) {
        document.setMetaTagValue(meta_tag, value);
      }
      // Remove it from `metaTags`.
      metaTags.splice(i, 1);
      // Updated.
      return true;
    }
    i++;
  }
}
//# sourceMappingURL=updateMeta.js.map