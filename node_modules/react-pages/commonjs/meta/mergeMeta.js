"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = mergeMeta;
var _baseMeta = _interopRequireDefault(require("./baseMeta.js"));
var _dropUndefinedProperties = _interopRequireDefault(require("./dropUndefinedProperties.js"));
var _usePageStateSelector = require("../redux/usePageStateSelector.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Gathers `<title/>` and `<meta/>` tags (inside `<head/>`)
 * defined for this route (`components` array).
 * @param {object[]} meta â€” An array of meta objects.
 * @return {object}
 */
function mergeMeta(_ref) {
  var pageMeta = _ref.pageMeta,
    pageMetaData = _ref.pageMetaData,
    rootMeta = _ref.rootMeta,
    rootMetaData = _ref.rootMetaData,
    useSelector = _ref.useSelector,
    stash = _ref.stash;
  var usePageStateSelector = function usePageStateSelector(reducerName, selectorFromReducerState) {
    return (0, _usePageStateSelector.usePageStateSelectorWithCustomUseSelector)(reducerName, selectorFromReducerState, useSelector);
  };

  // // `Object.assign` is not supported in Internet Explorer.
  // let meta = Object.assign({}, BASE_META, ...)

  var meta = _objectSpread({}, _baseMeta["default"]);
  if (rootMeta) {
    rootMetaData = rootMeta({
      useSelector: useSelector,
      usePageStateSelector: usePageStateSelector,
      props: stash.getRootRouteComponentProps() || {}
    });
    if (rootMetaData) {
      rootMetaData = (0, _dropUndefinedProperties["default"])(rootMetaData);
    }
  }
  stash.setRootRouteComponentMeta(rootMetaData);
  meta = _objectSpread(_objectSpread({}, meta), rootMetaData);
  if (pageMeta) {
    pageMetaData = pageMeta({
      useSelector: useSelector,
      usePageStateSelector: usePageStateSelector,
      props: stash.getPageRouteComponentProps() || {}
    });
    if (pageMetaData) {
      pageMetaData = (0, _dropUndefinedProperties["default"])(pageMetaData);
    }
  }
  stash.setPageRouteComponentMeta(pageMetaData);
  meta = _objectSpread(_objectSpread({}, meta), pageMetaData);

  // Remove `locale` from `locales`.
  if (meta.locale && meta.locales) {
    meta.locales = meta.locales.filter(function (_) {
      return _ !== meta.locale;
    });
    if (meta.locales.length === 0) {
      delete meta.locales;
    }
  }
  return meta;
}
//# sourceMappingURL=mergeMeta.js.map