"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = patchMeta;
var _context = require("../context.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// (not used)

// Instead of this `patchMeta()` (exported as `updateMeta()`) function,
// developers could theoretically just use the `.meta()` function with the supplied
// `useSelector()` hook, which would update the `<meta/>` tags automatically on changes.
// // If the `found` router calls the `render()` functions for its routes
// // not "outside of the React render process", otherwise it would throw an error:
// // "Invalid hook call. Hooks can only be called inside of the body of a function component".

/**
 * (advanced) (hacking around)
 * This client-side-only function is expored from this library
 * as an `updateMeta()` function. It could be used to "patch"
 * the latest applied `meta` for whatever reason.
 *
 * For example, one project required this type of function when
 * migrating `load()` methods from always being handled by this library
 * to being sometimes handled in a React's `useEffect()` hook
 * as a possible "user experience" enhancement.
 *
 * Another use case would be somehow changing the page's `title`
 * after some additional user-specific data has been loaded in a
 * React's `useEffect()` hook.
 *
 * Or, for example, when `<title/>` gets updated with the count of
 * unread notifications.
 */
function patchMeta(newMetaProperties) {
  if (typeof window === 'undefined') {
    throw new Error('[react-pages] `patchMeta()` could only be called on client side');
  }
  applyMeta(_objectSpread(_objectSpread({}, (0, _context.getFromContext)('App/LatestAppliedMeta')), newMetaProperties));
}
//# sourceMappingURL=patchMeta.js.map