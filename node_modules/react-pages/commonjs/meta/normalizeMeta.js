"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertMeta = convertMeta;
exports["default"] = normalizeMeta;
var _flatten = _interopRequireDefault(require("lodash/flatten.js"));
var _escapeHtml = _interopRequireDefault(require("../escapeHtml.js"));
var _expandArrays = _interopRequireDefault(require("./expandArrays.js"));
var _expandObjects = _interopRequireDefault(require("./expandObjects.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function normalizeMeta(meta) {
  return convertMeta(normalizeMetaKeys(meta));
}

/**
 * Transforms meta object having "keys"
 * into a meta object having the actual
 * `<meta/>` tag `name`s and `property`es.
 * @return Array of arrays having shape `[key, value]`.
 */
function normalizeMetaKeys(meta) {
  return Object.keys(meta).reduce(function (all, key) {
    var _iterator = _createForOfIteratorHelper(getMetaKeyAliases(key)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var alias = _step.value;
        all.push([alias, meta[key]]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return all;
  }, []);
}

/**
 * Gets `<meta/>` property aliases.
 * (for both `name` and `property`).
 * Also filters out `charset`.
 * @return {string}
 */
function getMetaKeyAliases(key) {
  switch (key) {
    // `<meta charset/>` is handled specially
    // because it doesn't have `name` attribute.
    case 'charset':
      return [];
    // `<meta name="description"/>` is an older and
    // more widely supported form than "og:description".
    // In practice there's no need to duplicate
    // `<meta name="description"/>` as "og:description".
    // Still, to keep it fully-OpenGraph-compliant
    // the description is duplicated as "og:description" here.
    // https://indieweb.org/The-Open-Graph-protocol#How_to_set_description
    case 'description':
      return [key, "og:".concat(key)];
    case 'siteName':
      return ["og:site_name"];
    case 'site_name':
    // `title` property of `meta` object is
    // handled specially via a `<title/>` tag.
    // There would be no need to add `og:title`
    // which duplicates the existing `<title/>`,
    // and `title` property could be discarded here.
    // For example, Facebook falls back to `<title/>` tag.
    // Still, OpenGraph specs formally require an `og:title`.
    // So, to keep it fully-OpenGraph-compliant
    // the title is duplicated as "og:title" here.
    // https://indieweb.org/The-Open-Graph-protocol#How_to_set_title
    case 'title':
    // SVG images are not supported (boo).
    // https://indieweb.org/The-Open-Graph-protocol#How_to_set_image
    case 'image':
    case 'locale':
    case 'type':
    case 'url':
    case 'audio':
    case 'video':
      return ["og:".concat(key)];
    case 'locales':
      return ['og:locale:alternate'];
    default:
      return [(0, _escapeHtml["default"])(key)];
  }
}

// Expands nested objects.
// Expands arrays.
// param meta â€” Either an object or an array of arrays having shape `[key, value]`.
// return An array of arrays having shape `[key, value]`.
function convertMeta(meta) {
  // Convert meta object to an array of arrays having shape `[key, value]`.
  if (!Array.isArray(meta)) {
    meta = Object.keys(meta).map(function (key) {
      return [key, meta[key]];
    });
  }
  return (0, _flatten["default"])(meta.map(function (keyValue) {
    return (0, _flatten["default"])((0, _expandArrays["default"])(keyValue).map(_expandObjects["default"]));
  }));
}
//# sourceMappingURL=normalizeMeta.js.map