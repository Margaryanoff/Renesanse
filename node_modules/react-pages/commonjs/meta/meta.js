"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertMeta = convertMeta;
exports.convertOpenGraphLocaleToLanguageTag = convertOpenGraphLocaleToLanguageTag;
exports.expandArrays = expandArrays;
exports.expandObjects = expandObjects;
exports.generateMetaTagsMarkup = generateMetaTagsMarkup;
exports.mergeMeta = mergeMeta;
exports.updateMeta = updateMeta;
var _flatten = _interopRequireDefault(require("lodash/flatten.js"));
var _compact = _interopRequireDefault(require("lodash/compact.js"));
var _BrowserDocument = _interopRequireWildcard(require("./BrowserDocument.js"));
var _dropUndefinedProperties = _interopRequireDefault(require("./dropUndefinedProperties.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var browserDocument = new _BrowserDocument["default"]();
var BASE_META = {
  charset: 'utf-8',
  // Fixes CSS screen width on mobile devices.
  // Otherwise media queries would not be applied initially
  // and it would show desktop version design.
  // Also, for `/react-pages-base` page this meta tag
  // needs to be present in markup as the default one
  // because `/react-pages-base` page doesn't collect
  // meta from page components.
  viewport: 'width=device-width, initial-scale=1.0'
};
var META_METHOD_NAME = 'meta';

/**
 * Gathers `<title/>` and `<meta/>` tags (inside `<head/>`)
 * defined for this route (`components` array).
 * @param {object[]} meta â€” An array of meta objects.
 * @return {object}
 */
function mergeMeta(_ref) {
  var pageMeta = _ref.pageMeta,
    pageMetaData = _ref.pageMetaData,
    rootMeta = _ref.rootMeta,
    rootMetaData = _ref.rootMetaData,
    useSelector = _ref.useSelector,
    stash = _ref.stash;
  // // `Object.assign` is not supported in Internet Explorer.
  // meta = Object.assign({}, BASE_META, ...)

  meta = _objectSpread({}, BASE_META);
  if (rootMeta) {
    rootMetaData = (0, _dropUndefinedProperties["default"])(rootMeta({
      useSelector: useSelector,
      props: stash.getRootComponentProps() || {}
    }));
  }
  stash.setRootMeta(rootMetaData);
  meta = _objectSpread(_objectSpread({}, meta), rootMetaData);
  if (pageMeta) {
    pageMetaData = (0, _dropUndefinedProperties["default"])(pageMeta({
      useSelector: useSelector,
      props: stash.getPageComponentProps() || {}
    }));
  }
  stash.setPageMeta(pageMetaData);
  meta = _objectSpread(_objectSpread({}, meta), pageMetaData);

  // Remove `locale` from `locales`.
  if (meta.locale && meta.locales) {
    meta.locales = meta.locales.filter(function (_) {
      return _ !== meta.locale;
    });
    if (meta.locales.length === 0) {
      delete meta.locales;
    }
  }
  return meta;
}

// Instead of the old `patchMeta()` (exported as `updateMeta()`) function,
// developers could see if the new automatically-updated `.meta()`
// with `useSelector` parameter works.
/**
 * (advanced) (hacking around)
 * This client-side-only function is expored from this library
 * as an `updateMeta()` function. It could be used to "patch"
 * the latest applied `meta` for whatever reason.
 *
 * For example, one project required this type of function when
 * migrating `load()` methods from always being handled by this library
 * to being sometimes handled in a React's `useEffect()` hook
 * as a possible "user experience" enhancement.
 *
 * Another use case would be somehow changing the page's `title`
 * after some additional user-specific data has been loaded in a
 * React's `useEffect()` hook.
 *
 * Or, for example, when `<title/>` gets updated with the count of
 * unread notifications.
 */
// export function patchMeta(metaProperties) {
// 	updateMeta({
// 		...window._ReactPages_Page_Meta,
// 		...metaProperties
// 	})
// }

/**
 * Updates `<title/>` and `<meta/>` tags (inside `<head/>`).
 */
function updateMeta(meta) {
  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : browserDocument;
  // `patchMeta()` function is not exported in the new version of this library.
  // // Keep a reference to the latest applied `meta`
  // // in order for the `patchMeta()` public exported function to work.
  // // The public exported `patchMeta()` function is not the same as
  // // this `updateMeta()` function.
  // //
  // // Tests don't have a `window` global variable.
  // if (typeof window !== 'undefined') {
  // 	window._ReactPages_Page_Meta = meta
  // }

  var _meta = meta,
    title = _meta.title,
    charset = _meta.charset;
  meta = normalizeMeta(meta);

  // Get all `<meta/>` tags.
  // (will be mutated)
  var metaTags = document.getMetaTags();

  // Update `<title/>`.
  if (title && document.getTitle() !== title) {
    document.setTitle(title);
  }

  // Update `<meta charset/>`.
  if (charset) {
    updateMetaTag(document, metaTags, 'charset', charset);
  }

  // Update existing `<meta/>` tags.
  // (removing them from `metaTags` array)
  var newMetaTags = (0, _compact["default"])(meta.map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      key = _ref3[0],
      value = _ref3[1];
    if (!updateMetaTag(document, metaTags, key, value)) {
      return [key, value];
    }
  }));

  // Delete no longer existent `<meta/>` tags.
  metaTags.forEach(document.removeMetaTag);

  // Create new `<meta/>` tags.
  var _iterator = _createForOfIteratorHelper(newMetaTags),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      document.addMetaTag(key, value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

/**
 * Generates a list of `<title/>` and `<meta/>` tags markup.
 * @param  {object[]} meta
 * @return {string[]}
 */
function generateMetaTagsMarkup(meta) {
  var _meta2 = meta,
    title = _meta2.title,
    charset = _meta2.charset;
  meta = normalizeMeta(meta);
  return [// `<meta charset/>` should always come first
  // because some browsers only read the first
  // 1024 bytes when deciding on page encoding.
  // (`<meta charset/>` is always present)
  "<meta charset=\"".concat(escapeHTML(charset || BASE_META.charset), "\"/>"), "<title>".concat(escapeHTML(title || ''), "</title>")].concat(meta.map(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
      key = _ref5[0],
      value = _ref5[1];
    return generateMetaTagMarkup(key, value);
  }));
}

/**
 * Generates `<meta/>` tag HTML markup.
 * @param {string} key
 * @param {string} value
 * @return {string}
 */
function generateMetaTagMarkup(name, value) {
  if (typeof value === 'boolean' || typeof value === 'number') {
    value = String(value);
  } else {
    value = escapeHTML(String(value));
  }
  return "<meta ".concat((0, _BrowserDocument.getMetaAttributeFor)(name), "=\"").concat(name, "\" content=\"").concat(value, "\"/>");
}

/**
 * Gets `<meta/>` property aliases.
 * (for both `name` and `property`).
 * Also filters out `charset`.
 * @return {string}
 */
function getMetaKeyAliases(key) {
  switch (key) {
    // `<meta charset/>` is handled specially
    // because it doesn't have `name` attribute.
    case 'charset':
      return [];
    // `<meta name="description"/>` is an older and
    // more widely supported form than "og:description".
    // In practice there's no need to duplicate
    // `<meta name="description"/>` as "og:description".
    // Still, to keep it fully-OpenGraph-compliant
    // the description is duplicated as "og:description" here.
    // https://indieweb.org/The-Open-Graph-protocol#How_to_set_description
    case 'description':
      return [key, "og:".concat(key)];
    case 'siteName':
      return ["og:site_name"];
    case 'site_name':
    // `title` property of `meta` object is
    // handled specially via a `<title/>` tag.
    // There would be no need to add `og:title`
    // which duplicates the existing `<title/>`,
    // and `title` property could be discarded here.
    // For example, Facebook falls back to `<title/>` tag.
    // Still, OpenGraph specs formally require an `og:title`.
    // So, to keep it fully-OpenGraph-compliant
    // the title is duplicated as "og:title" here.
    // https://indieweb.org/The-Open-Graph-protocol#How_to_set_title
    case 'title':
    // SVG images are not supported (boo).
    // https://indieweb.org/The-Open-Graph-protocol#How_to_set_image
    case 'image':
    case 'locale':
    case 'type':
    case 'url':
    case 'audio':
    case 'video':
      return ["og:".concat(key)];
    case 'locales':
      return ['og:locale:alternate'];
    default:
      return [escapeHTML(key)];
  }
}

/**
 * Updates `<meta/>` tag to a new `value` and removes it from `metaTags`.
 * @param {Document} document - `BrowserDocument` or `TestDocument`.
 * @return {boolean?}
 */
function updateMetaTag(document, metaTags, name, value) {
  var i = 0;
  while (i < metaTags.length) {
    var meta_tag = metaTags[i];
    if (document.isMetaTag(meta_tag, name)) {
      // Update `<meta/>` tag `value`.
      if (document.getMetaTagValue(meta_tag) !== value) {
        document.setMetaTagValue(meta_tag, value);
      }
      // Remove it from `metaTags`.
      metaTags.splice(i, 1);
      // Updated.
      return true;
    }
    i++;
  }
}

/**
 * Escapes a string so that it's kinda safe to insert into HTML.
 * @return {string}
 */
function escapeHTML(string) {
  return string && string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;').replace('\'', '&#x27;').replace('/', '&#x2F;');
}

/**
 * Transforms meta object having "keys"
 * into a meta object having the actual
 * `<meta/>` tag `name`s and `property`es.
 * @return Array of arrays having shape `[key, value]`.
 */
function normalizeMetaKeys(meta) {
  return Object.keys(meta).reduce(function (all, key) {
    var _iterator2 = _createForOfIteratorHelper(getMetaKeyAliases(key)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var alias = _step2.value;
        all.push([alias, meta[key]]);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return all;
  }, []);
}
function normalizeMeta(meta) {
  return convertMeta(normalizeMetaKeys(meta));
}

// Expands nested objects.
// Expands arrays.
// @param meta â€” Either an object or an array of arrays having shape `[key, value]`.
// @return An array of arrays having shape `[key, value]`.
function convertMeta(meta) {
  // Convert meta object to an array of arrays having shape `[key, value]`.
  if (!Array.isArray(meta)) {
    meta = Object.keys(meta).map(function (key) {
      return [key, meta[key]];
    });
  }
  return (0, _flatten["default"])(meta.map(function (keyValue) {
    return (0, _flatten["default"])(expandArrays(keyValue).map(expandObjects));
  }));
}

// There can be arrays of properties.
// For example:
// <meta property="og:image" content="//example.com/image.jpg" />
// <meta property="og:image:width" content="100" />
// <meta property="og:image:height" content="100" />
// <meta property="og:image" content="//example.com/image@2x.jpg" />
// <meta property="og:image:width" content="200" />
// <meta property="og:image:height" content="200" />
function expandArrays(meta) {
  if (Array.isArray(meta[1])) {
    return meta[1].map(function (value) {
      return [meta[0], value];
    });
  }
  return [meta];
}

// If `value` is an object
// then expand such object
// prefixing property names.
function expandObjects(meta) {
  if (_typeof(meta[1]) === 'object') {
    return (0, _flatten["default"])(Object.keys(meta[1]).map(function (key) {
      return [key === '_' ? meta[0] : "".concat(meta[0], ":").concat(key), meta[1][key]];
    })
    // Expand objects recursively.
    .map(expandObjects));
  }
  return [meta];
}
function convertOpenGraphLocaleToLanguageTag(ogLocale) {
  return ogLocale.replace('_', '-');
}
//# sourceMappingURL=meta.js.map