"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getMetaTagsMarkup;
var _escapeHtml = _interopRequireDefault(require("../escapeHtml.js"));
var _BrowserDocument = require("./BrowserDocument.js");
var _normalizeMeta = _interopRequireDefault(require("./normalizeMeta.js"));
var _baseMeta = _interopRequireDefault(require("./baseMeta.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * Generates a list of `<title/>` and `<meta/>` tags markup.
 * @param  {object[]} meta
 * @return {string[]}
 */
function getMetaTagsMarkup(meta) {
  var _meta = meta,
    title = _meta.title,
    charset = _meta.charset;
  meta = (0, _normalizeMeta["default"])(meta);
  return [// `<meta charset/>` should always come first
  // because some browsers only read the first
  // 1024 bytes when deciding on page encoding.
  // (`<meta charset/>` is always present)
  "<meta charset=\"".concat((0, _escapeHtml["default"])(charset || _baseMeta["default"].charset), "\"/>"), "<title>".concat((0, _escapeHtml["default"])(title || ''), "</title>")].concat(meta.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];
    return generateMetaTagMarkup(key, value);
  }));
}

/**
 * Generates `<meta/>` tag HTML markup.
 * @param {string} key
 * @param {string} value
 * @return {string}
 */
function generateMetaTagMarkup(name, value) {
  if (typeof value === 'boolean' || typeof value === 'number') {
    value = String(value);
  } else {
    value = (0, _escapeHtml["default"])(String(value));
  }
  return "<meta ".concat((0, _BrowserDocument.getMetaAttributeFor)(name), "=\"").concat(name, "\" content=\"").concat(value, "\"/>");
}
//# sourceMappingURL=getMetaTagsMarkup.js.map