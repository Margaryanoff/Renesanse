"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IsoDatePattern = void 0;
exports["default"] = parseDates;
var _isObject = _interopRequireDefault(require("./isObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
// ISO 8601 date regular expression
// Adapted from: http://stackoverflow.com/a/14322189/970769

var hours = '([01]\\d|2[0-3])';
var minutes = '[0-5]\\d';
var hoursAndMinutesForMidnightUnconventional = '24\\:00';
var seconds = '[0-5]\\d';
var milliseconds = '[\\d]{3}';
var time = "(".concat(hours, "\\:").concat(minutes, "|").concat(hoursAndMinutesForMidnightUnconventional, ")\\:").concat(seconds, "\\.").concat(milliseconds);
var timezone = 'Z';
var year = '\\d{4}';
var month = '(0[1-9]|1[0-2])';
var day = '([12]\\d|0[1-9]|3[01])';
var IsoDatePattern = "".concat(year, "-").concat(month, "-").concat(day, "T").concat(time).concat(timezone);
exports.IsoDatePattern = IsoDatePattern;
var IsoDateRegExp = new RegExp('^' + IsoDatePattern + '$');

// JSON date deserializer.
//
// Automatically converts ISO serialized `Date`s
// in JSON responses for Ajax HTTP requests.
//
// Without it the developer would have to convert
// `Date` strings to `Date`s in Ajax HTTP responses manually.
//
// Use as the second, 'reviver' argument to `JSON.parse`: `JSON.parse(json, JSON.dateParser)`
//
// http://stackoverflow.com/questions/14488745/javascript-json-date-deserialization/23691273#23691273

// Walks JSON object tree
function parseDates(object) {
  // If it's a date in an ISO string format, then parse it
  if (typeof object === 'string' && IsoDateRegExp.test(object)) {
    object = new Date(object);
  }
  // If an array is encountered,
  // proceed recursively with each element of this array.
  else if (Array.isArray(object)) {
    var i = 0;
    while (i < object.length) {
      object[i] = parseDates(object[i]);
      i++;
    }
  }
  // If a child JSON object is encountered,
  // convert all of its `Date` string values to `Date`s,
  // and proceed recursively for all of its properties.
  else if ((0, _isObject["default"])(object)) {
    for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      // proceed recursively
      object[key] = parseDates(object[key]);
    }
  }

  // Dates have been converted for this JSON object
  return object;
}
//# sourceMappingURL=parseDates.js.map