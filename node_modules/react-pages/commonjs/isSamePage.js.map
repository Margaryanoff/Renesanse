{"version":3,"file":"isSamePage.js","names":["getPageKey","location","pathname","isSamePage","location1","location2"],"sources":["../lib/isSamePage.js"],"sourcesContent":["// The concept of a \"page\" is: a \"page\" is something within a certain pathname.\r\n// I.e. changing URL query parameters or \"hash\" isn't considered \"going to another page\",\r\n// even though the URL value in the address bar changes in those cases.\r\n// Only changing URL query `pathname` is considered \"going to another page\".\r\n//\r\n// This is more of a question about the conventions that're used when architecturing\r\n// a website's navigation. Should URL query parameters or \"hash\" represent \"another page\"?\r\n// Or should they only represent slight \"modifications\" to the \"current page\"?\r\n//\r\n// For example, a `/search` page might have a URL query part where search filter values are stored.\r\n// When a user refreshes the web page, the filter values get restored from the URL, which is convenient.\r\n// But at the same time, chaning the URL query parameters dynamically when selecting or unselecting\r\n// certain filters is not conceptually considered as \"going to another page\".\r\n//\r\n// There used to be those old websites that used the \"hash\" part for `pathname`\r\n// before `history` API was supported across the web browsers. Those cases can be ignored.\r\n//\r\n// There also used to be approaches to building websites in the 90'es and in the 2000's\r\n// when they specified parameters like `userId` not in the `pathname` but in URL query instead:\r\n// it looked like \"/users?id=123\" rather than the modern variant \"/users/123\".\r\n// Those cases can be ignored too because no one does that in the modern age\r\n// of compying with the concepts of URL, \"resource\", REST, etc.\r\n//\r\n// So the convention is that URL query parameters shouldn't be used to represent another resource.\r\n// They can only represent \"customization\" for retrieving a certain (same) resource.\r\n//\r\n// -------------------------------------------------------------------------------\r\n//\r\n// There's an edge case though when such \"same page\" detection wouldn't work.\r\n// That would happen when navigating from same page to same page.\r\n//\r\n// For example, consider a case of a website like \"Reddit\" that consists of \"channels\".\r\n// Suppose a user has navigated to a \"channel\" page and then decides to refresh the list of thread\r\n// on the channel by clicking the hyperlink to the same channel once again:\r\n// in that case, `react-pages` won't remount the page `Component`, even though from the user's\r\n// point of view it is considered navigating to another instance of same page, i.e. the page\r\n// should've been reset in this case from the user's point of view.\r\n//\r\nexport function getPageKey(location) {\r\n\treturn location.pathname\r\n}\r\n\r\nexport default function isSamePage(location1, location2) {\r\n\treturn getPageKey(location1) === getPageKey(location2)\r\n}"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAU,CAACC,QAAQ,EAAE;EACpC,OAAOA,QAAQ,CAACC,QAAQ;AACzB;AAEe,SAASC,UAAU,CAACC,SAAS,EAAEC,SAAS,EAAE;EACxD,OAAOL,UAAU,CAACI,SAAS,CAAC,KAAKJ,UAAU,CAACK,SAAS,CAAC;AACvD"}