"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var FadeInOut = /*#__PURE__*/function (_React$Component) {
  _inherits(FadeInOut, _React$Component);
  var _super = _createSuper(FadeInOut);
  function FadeInOut(props) {
    var _this;
    _classCallCheck(this, FadeInOut);
    _this = _super.call(this, props);
    _this.state = {
      show: _this.props.show
    };
    return _this;
  }
  _createClass(FadeInOut, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.show && this.props.show) {
        this.show();
      } else if (prevProps.show && !this.props.show) {
        this.hide();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
    }
  }, {
    key: "show",
    value: function show() {
      var _this2 = this;
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      this.setState({
        show: true,
        fadeIn: false,
        fadeOut: false
      });
      this.showTimer = setTimeout(function () {
        if (_this2._isMounted) {
          _this2.setState({
            fadeIn: true
          });
        }
      },
      // Adding a non-null delay in order to
      // prevent web browser from optimizing
      // adding CSS classes and doing it simultaneously
      // rather than sequentially (required for CSS transition).
      10);
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this3 = this;
      var fadeOutDuration = this.props.fadeOutDuration;
      clearTimeout(this.showTimer);
      if (!this._isMounted) {
        return;
      }
      this.setState({
        show: false,
        fadeIn: false,
        fadeOut: true
      });

      // Gives some time to CSS opacity transition to finish.
      this.hideTimer = setTimeout(function () {
        if (_this3._isMounted) {
          _this3.setState({
            fadeOut: false
          });
        }
      }, fadeOutDuration);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        fadeInClassName = _this$props.fadeInClassName,
        hiddenClassName = _this$props.hiddenClassName,
        children = _this$props.children;
      var _this$state = this.state,
        show = _this$state.show,
        fadeIn = _this$state.fadeIn,
        fadeOut = _this$state.fadeOut;
      if (show || fadeOut) {
        if (fadeInClassName) {
          return _react["default"].cloneElement(children, {
            className: (0, _classnames["default"])(children.props.className, _defineProperty({}, fadeInClassName, fadeIn))
          });
        }
        return children;
      }
      if (hiddenClassName) {
        return _react["default"].cloneElement(children, {
          className: (0, _classnames["default"])(children.props.className, hiddenClassName)
        });
      }
      return null;
    }
  }]);
  return FadeInOut;
}(_react["default"].Component);
exports["default"] = FadeInOut;
FadeInOut.propTypes = {
  show: _propTypes["default"].bool.isRequired,
  hiddenClassName: _propTypes["default"].string,
  fadeOutDuration: _propTypes["default"].number.isRequired,
  fadeInClassName: _propTypes["default"].string,
  children: _propTypes["default"].node.isRequired
};
FadeInOut.defaultProps = {
  show: false
};
//# sourceMappingURL=FadeInOut.js.map