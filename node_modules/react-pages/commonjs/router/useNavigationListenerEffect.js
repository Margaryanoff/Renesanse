"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useNavigationListenerEffect;
var _react = require("react");
var _context = require("../context.js");
function useNavigationListenerEffect(_ref) {
  var key = _ref.contextKey,
    listener = _ref.listener;
  (0, _react.useEffect)(function () {
    addListener(key, listener);

    // Originally, it was removing the listener in the effect's "clean-up" function.
    // The reason being, React calls effects multiple times in `<StrictMode/>`,
    // so it should remove any listeners it has added when the effect was triggered.
    //
    // But at the same time, hooks like `useAfterNavigatedToAnotherPage()` aren't possible
    // with such implementation because their listeners would be removed before
    // it has finished mounting the new page because the old page is already unmounted by then.
    //
    // As a workaround, for `useAfterNavigatedToAnotherPage()` hook specifically,
    // its listener isn't removed in the effect's "clean-up" function.
    // Instead, adding a listener is "idempotent", i.e. can be called multiple times
    // without resulting in duplicates.
    //
    // All listeners get cleaned automatically after a new page has been rendered.
    //
    return function () {
      removeListener(key, listener);
    };
  }, []);
}
var addListener = function addListener(key, listener) {
  if (!(0, _context.getFromContext)(key)) {
    (0, _context.setInContext)(key, []);
  }
  // The adding of a `listener` is "idempotent", i.e. calling this function
  // multiple times with the same argument won't result in duplicates.
  var existingListeners = (0, _context.getFromContext)(key);
  if (existingListeners.indexOf(listener) < 0) {
    (0, _context.setInContext)(key, existingListeners.concat([listener]));
  }
};
var removeListener = function removeListener(key, listener) {
  if ((0, _context.getFromContext)(key)) {
    (0, _context.setInContext)(key, (0, _context.getFromContext)(key).filter(function (_) {
      return _ !== listener;
    }));
  }
};
//# sourceMappingURL=useNavigationListenerEffect.js.map