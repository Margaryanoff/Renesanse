"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = RouteProvider;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _getRoutePath = _interopRequireDefault(require("./getRoutePath.js"));
var _RouteContext = _interopRequireDefault(require("./RouteContext.js"));
var _context = require("../context.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function RouteProvider(_ref) {
  var location = _ref.location,
    routes = _ref.routes,
    params = _ref.params,
    children = _ref.children;
  var getRoute = function getRoute() {
    return {
      location: location,
      params: params,
      path: (0, _getRoutePath["default"])(routes)
    };
  };
  var initialRoute = (0, _react.useMemo)(function () {
    return getRoute();
  }, []);
  var currentRoute = (0, _react.useRef)(initialRoute);
  var currentRouteInstantBack = (0, _react.useRef)(false);
  var currentRouteNavigationContext = (0, _react.useRef)(undefined);
  console.log('$$$$$$$$$$$$$$$$$$$$$$$$$$ <RouteProvider/>');
  console.log('$$$$ location', location);

  // `location` is `undefined` when router starts loading the next page.
  // In that case, the previous page is still rendered, so `currentRoute`
  // shouldn't change.
  if (location) {
    if (location !== currentRoute.current.location) {
      var route = getRoute();

      // "Navigation/IsInstantBack" and "Navigation/Context" values that're later used in `useEffect()`
      // should be snapshotted at this state â€” at the same stage that the "new page" route is snapshotted.
      // Otherwise, those values might potentially correspond to some other navigation (subsequent)
      // that happens right after this (current) navigation.
      var instantBack = (0, _context.getFromContext)('Navigation/IsInstantBack');
      var navigationContext = (0, _context.getFromContext)('Navigation/Context');

      // Store the snapshotted values in `ref`s.
      currentRoute.current = route;
      currentRouteInstantBack.current = instantBack;
      currentRouteNavigationContext.current = navigationContext;

      // Trigger "before new page will be rendered" listeners.
      var beforeRenderNewPageListeners = (0, _context.takeFromContext)('Navigation/BeforeRenderNewPage');
      if (beforeRenderNewPageListeners) {
        var _iterator = _createForOfIteratorHelper(beforeRenderNewPageListeners),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var listener = _step.value;
            listener({
              location: route.location,
              route: route.path,
              params: route.params,
              instantBack: instantBack,
              navigationContext: navigationContext
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  }

  // `currentRouteValue` variable is created here to store `currentRoute.current` `ref` value.
  // The reason is that the `ref` value, when referenced from `useEffect()` callback,
  // will always point to the very latest value in that `ref` at not to the `ref` value
  // that existed at the time of comparing the dependencies of the effect.
  // In other words, `ref` value inside effect callback might go out of sync with
  // itself at the time of evaluating the effect's dependencies.
  //
  // Using a variable allows "capturing" the `ref` value at a certain point in time
  // and then use that value later when the effect's callback function is run.
  // This is called "closure" in javascript language.
  //
  // For example, user navigates from `/items` to `/items/123` and "new page" event
  // is registered here, and `useEffect()` is ready to be run but the user quickly
  // navigates to `/contacts` page and all the `ref`s now store the values for that
  // `/contacts` page and not for the `/items/123` page, so the `useEffect()` callback
  // shouldn't read any values from those `ref`s since those `ref` values may have
  // already been overwritten.
  //
  var currentRouteValue = currentRoute.current;
  var currentRouteInstantBackValue = currentRouteInstantBack.current;
  var currentRouteNavigationContextValue = currentRouteNavigationContext.current;

  // This variable prevents the effect from triggering multiple times for same page.
  // I.e. the effect would only run on the actual change vs randomly.
  //
  // The `ref` is initialized with `undefined` rather than `currentRoute.current`.
  // That is to trigger `useEffect()` below at the initial page render.
  //
  var currentRoutePrev = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    // When a new location (page) has been rendered.
    if (currentRouteValue !== currentRoutePrev.current) {
      var isInitialPageLoad = !currentRoutePrev.current;

      // Mark this new location (page) as "effect already triggered".
      currentRoutePrev.current = currentRouteValue;

      // This shouldn't be run on the initial render.
      console.log('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ hasRouteChanged');

      // Trigger navigation end listeners (for previous page).
      var afterNavigatedToAnotherPageListeners = (0, _context.takeFromContext)('Navigation/AfterNavigatedToAnotherPage');
      if (afterNavigatedToAnotherPageListeners) {
        if (isInitialPageLoad) {
          var _iterator2 = _createForOfIteratorHelper(afterNavigatedToAnotherPageListeners),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _listener = _step2.value;
              _listener({
                location: currentRouteValue.location,
                route: currentRouteValue.path,
                params: currentRouteValue.params,
                instantBack: currentRouteInstantBackValue,
                navigationContext: currentRouteNavigationContextValue
              });
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }

      // Trigger navigation end listeners (for new page).
      var afterNavigatedToThisPageListeners = (0, _context.takeFromContext)('Navigation/AfterNavigatedToThisPage');
      if (afterNavigatedToThisPageListeners) {
        var _iterator3 = _createForOfIteratorHelper(afterNavigatedToThisPageListeners),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _listener2 = _step3.value;
            _listener2({
              location: currentRouteValue.location,
              route: currentRouteValue.path,
              params: currentRouteValue.params,
              instantBack: currentRouteInstantBackValue,
              navigationContext: currentRouteNavigationContextValue
            });
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      // Trigger "after new page has been rendered" listeners.
      var afterRenderedNewPageListeners = (0, _context.takeFromContext)('Navigation/AfterRenderedNewPage');
      if (afterRenderedNewPageListeners) {
        var _iterator4 = _createForOfIteratorHelper(afterRenderedNewPageListeners),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _listener3 = _step4.value;
            _listener3({
              location: currentRouteValue.location,
              route: currentRouteValue.path,
              params: currentRouteValue.params,
              instantBack: currentRouteInstantBackValue,
              navigationContext: currentRouteNavigationContextValue
            });
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
  }, [currentRouteValue]);
  return _react["default"].createElement(_RouteContext["default"].Provider, {
    value: currentRouteValue
  }, children);
}
var routeShape = {
  // A `route` doesn't always have a `path` property:
  // `found` router allows that when nesting routes.
  // Example: `{ Component: Wrapper, children: { path: '/', Component: Home } }`.
  path: _propTypes["default"].string
};
routeShape.children = _propTypes["default"].arrayOf(_propTypes["default"].shape(routeShape));
var routeType = _propTypes["default"].shape(routeShape);
RouteProvider.propTypes = {
  location: _propTypes["default"].shape({
    origin: _propTypes["default"].string,
    host: _propTypes["default"].string,
    hostname: _propTypes["default"].string,
    port: _propTypes["default"].string,
    protocol: _propTypes["default"].string,
    pathname: _propTypes["default"].string.isRequired,
    query: _propTypes["default"].objectOf(_propTypes["default"].string).isRequired,
    search: _propTypes["default"].string.isRequired,
    hash: _propTypes["default"].string.isRequired,
    // Miscellaneous (not used).

    // Some kind of a possibly-likely-unique key. Is empty for the initial page.
    key: _propTypes["default"].string,
    // History entry state. Can be empty.
    state: _propTypes["default"].any,
    // Index in browser history stack.
    // Seems to be `undefined` during the initial client-side render
    // after the page has been rendered on the server side.
    index: _propTypes["default"].number,
    // The "delta" in terms of `index` change as a result of the navigation.
    // For example, a regular hyperlink click is `delta: 1`.
    // A "Back" action is `delta: -1`. A user could go several pages "Back".
    delta: _propTypes["default"].number,
    // 'PUSH' or 'REPLACE' if the location was reached via history "push" or
    // "replace" action respectively. 'POP' on the initial location, or if
    // the location was reached via the browser "Back" or "Forward" buttons
    // or via `FarceActions.go`.
    action: _propTypes["default"].oneOf(['PUSH', 'REPLACE', 'POP']).isRequired
  }),
  routes: _propTypes["default"].arrayOf(routeType),
  params: _propTypes["default"].objectOf(_propTypes["default"].string),
  children: _propTypes["default"].node
};
//# sourceMappingURL=RouteProvider.js.map