{"version":3,"file":"useAfterNavigatedToAnotherPage.unused.js","names":[],"sources":["../../lib/router/useAfterNavigatedToAnotherPage.unused.js"],"sourcesContent":["// import useNavigationListenerEffect from './useNavigationListenerEffect.js'\r\n// import { useIsLeafRoute } from './LeafRouteContext.js'\r\n//\r\n// export default function useAfterNavigatedToAnotherPage(listener) {\r\n// \tconst isLeafRoute = useIsLeafRoute()\r\n// \tif (!isLeafRoute) {\r\n// \t\tthrow new Error('`useAfterNavigatedToAnotherPage()` hook can only be used in a \"leaf\" route component')\r\n// \t}\r\n// \tuseNavigationListenerEffect({\r\n// \t\tcontextKey: 'Navigation/AfterNavigatedToAnotherPage',\r\n// \t\tlistener,\r\n//\r\n// \t\t// It has to not remove the listener on unmount because otherwise the listener wouldn't ever be called.\r\n// \t\t// The reason is that by the time the new page has been rendered, the old one is already unmounted\r\n// \t\t// and because of that its listeners would already have been removed when not passing `unlistenOnUnmount: false` parameter.\r\n// \t\t//\r\n// \t\t// Not removing the listener on unmount is fine becase it won't be accidentally re-added\r\n// \t\t// by accidentally re-running `useEffect()` on the old page because it has already been unmounted.\r\n// \t\t//\r\n// \t\tunlistenOnUnmount: false\r\n// \t})\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA"}