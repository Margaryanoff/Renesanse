"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._RESOLVE_MATCH = exports.UPDATE_MATCH = exports.UNLISTEN_BROWSER_HISTORY_EVENTS = exports.RESOLVE_MATCH = exports.REDIRECT_ACTION_TYPE = exports.GOTO_ACTION_TYPE = void 0;
exports.goBack = goBack;
exports.goBackTwoPages = goBackTwoPages;
exports.goForward = goForward;
exports["goto"] = _goto;
exports.initializeRouterAction = initializeRouterAction;
exports.navigateThroughHistory = navigateThroughHistory;
exports.pushLocation = pushLocation;
exports.redirect = redirect;
exports.replaceLocation = replaceLocation;
exports.setNavigationContext = setNavigationContext;
var _found = require("@catamphetamine/found");
var _farce = require("@catamphetamine/farce");
var _instantNavigation = require("../redux/client/instantNavigation.js");
var _context = require("../context.js");
// `@catamphetamine/found` is a fork of `found` with some changes:
// * `redux` and `react-redux` are `peerDependencies` instead of `dependencies`.
// * `farce` was replaced with `@catamphetamine/farce` (added `location.origin`)

function setNavigationContext(context) {
  if (context !== undefined) {
    if (typeof window === 'undefined') {
      throw new Error('Navigation context parameter is only supported on client side');
    }
    (0, _context.setInContext)('Navigation/Context', context);
  }
}
function setNavigationLoadFlag(load) {
  if (load === false) {
    (0, _context.setInContext)('Navigation/SkipLoad', true);
  }
}
function redirect(location) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    load = _ref.load,
    context = _ref.context;
  setNavigationLoadFlag(load);
  setNavigationContext(context);
  return _farce.Actions.replace(location);
}
function _goto(location) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    load = _ref2.load,
    context = _ref2.context,
    instantBack = _ref2.instantBack;
  setNavigationLoadFlag(load);
  setNavigationContext(context);
  (0, _instantNavigation.setInstantBackAbilityFlagForThisNavigation)(instantBack);
  return _farce.Actions.push(location);
}
function navigateThroughHistory(delta) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    load = _ref3.load;
  setNavigationLoadFlag(load);
  return _farce.Actions.go(delta);
}
var REDIRECT_ACTION_TYPE = _farce.ActionTypes.REPLACE;
exports.REDIRECT_ACTION_TYPE = REDIRECT_ACTION_TYPE;
var GOTO_ACTION_TYPE = _farce.ActionTypes.PUSH;
exports.GOTO_ACTION_TYPE = GOTO_ACTION_TYPE;
function goBack() {
  return _farce.Actions.go(-1);
}
function goBackTwoPages() {
  return _farce.Actions.go(-2);
}
function goForward() {
  return _farce.Actions.go(1);
}
function pushLocation(location, options) {
  setNavigationLoadFlag(false);
  return _goto(location, options);
}
function replaceLocation(location) {
  setNavigationLoadFlag(false);
  return redirect(location);
}
function initializeRouterAction() {
  return _farce.Actions.init();
}
var UPDATE_MATCH = _found.ActionTypes.UPDATE_MATCH;
exports.UPDATE_MATCH = UPDATE_MATCH;
var RESOLVE_MATCH = _found.ActionTypes.RESOLVE_MATCH;
exports.RESOLVE_MATCH = RESOLVE_MATCH;
var _RESOLVE_MATCH = '@@react-pages/RESOLVE_MATCH';
exports._RESOLVE_MATCH = _RESOLVE_MATCH;
var UNLISTEN_BROWSER_HISTORY_EVENTS = _farce.ActionTypes.DISPOSE;
exports.UNLISTEN_BROWSER_HISTORY_EVENTS = UNLISTEN_BROWSER_HISTORY_EVENTS;
//# sourceMappingURL=actions.js.map