{"version":3,"file":"useRoute.js","names":["useRoute","useContext","RouterContext","value"],"sources":["../../lib/router/useRoute.js"],"sourcesContent":["import { useContext } from 'react'\r\n\r\nimport RouterContext from './RouterContext.js'\r\n\r\n// This hook doesn't simply return `state.found.resolvedMatch.location`.\r\n// The reason is that `resolvedMatch` gets updated right after a route\r\n// has been matched against the URL, but there's a small gap in time between\r\n// \"the route has been matched\" and \"the router has rendered the new page\".\r\n// That results in the previously rendered page getting an incorrect `location` —\r\n// the location of the next page — while the \"old\" page is still rendered,\r\n// which caused bugs.\r\n//\r\n// So instead, `<RouterContext/>` React element is rendered, and it always\r\n// gets updated exactly at the time when a new page gets rendered, so at any\r\n// given time it corresponds exactly to what page is actually rendered at the time.\r\n//\r\nexport default function useRoute() {\r\n\treturn useContext(RouterContext).value\r\n}"],"mappings":";;;;;;AAAA;AAEA;AAA8C;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,QAAQ,GAAG;EAClC,OAAO,IAAAC,iBAAU,EAACC,yBAAa,CAAC,CAACC,KAAK;AACvC"}