{"version":3,"file":"useCurrentRouteChangeEffect.js","names":["useCurrentRouteChangeEffect","currentRoute","prevPage","newPage","useEffectOnChange","isInitialPageRender","isInitialChange","setInContext","clearNavigationState","afterNavigatedToThisPageListeners","takeFromContext","listener","afterRenderedNewPageListeners","getFromContext","callback","dependencies","length","Error","value","prevValue","useRef","current","useEffect"],"sources":["../../lib/router/useCurrentRouteChangeEffect.js"],"sourcesContent":["import { useEffect, useRef } from 'react'\r\n\r\nimport { takeFromContext, getFromContext, setInContext } from '../context.js'\r\nimport clearNavigationState from './clearNavigationState.js'\r\n\r\nexport default function useCurrentRouteChangeEffect({\r\n\tcurrentRoute,\r\n\tprevPage,\r\n\tnewPage\r\n}) {\r\n\t// When a new location (page) has been rendered.\r\n\tuseEffectOnChange((currentRoute, { isInitialChange: isInitialPageRender }) => {\r\n\t\t// When running in `<StrictMode/>`, React mounts and unmounts \"effects\" twice.\r\n\t\t// That's why `Root/PrevPage` and `Root/NewPage` are only set here, when an actual change happens.\r\n\t\t// Otherwise, `Root/PrevPage` would be the same as `Root/NewPage` as a result of executing the code below twice.\r\n\t\tsetInContext('Root/PrevPage', prevPage)\r\n\t\tsetInContext('Root/NewPage', newPage)\r\n\r\n\t\t// Clear any navigation-related context info\r\n\t\t// because the navigation has finished.\r\n\t\tclearNavigationState()\r\n\r\n\t\t// These listeners, if uncommented, should be snapshotted at the time of evaluating the dependencies.\r\n\t\t// Otherwise, by the time the new page gets mounted, its own \"after navigated to another page\" listener\r\n\t\t// will also be added to the list of listeners, so a weird situation would occur:\r\n\t\t// \"after navigated to another page\" listener of the new page would be triggered upon navigating to it.\r\n\t\t//\r\n\t\t// // Trigger navigation end listeners (for previous page).\r\n\t\t// const afterNavigatedToAnotherPageListeners = takeFromContext('Navigation/AfterNavigatedToAnotherPage')\r\n\t\t// if (afterNavigatedToAnotherPageListeners) {\r\n\t\t// \tif (isInitialPageRender) { // Why is this `if` condition here. Maybe remove it. Or change it.\r\n\t\t// \t\tfor (const listener of afterNavigatedToAnotherPageListeners) {\r\n\t\t// \t\t\tlistener(newPage)\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\t// Trigger navigation end listeners (for new page).\r\n\t\tconst afterNavigatedToThisPageListeners = takeFromContext('Navigation/AfterRenderedThisPage')\r\n\t\tif (afterNavigatedToThisPageListeners) {\r\n\t\t\tfor (const listener of afterNavigatedToThisPageListeners) {\r\n\t\t\t\tlistener(newPage)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Trigger \"after new page has been rendered\" listeners.\r\n\t\tconst afterRenderedNewPageListeners = getFromContext('Root/AfterRenderedNewPage')\r\n\t\tif (afterRenderedNewPageListeners) {\r\n\t\t\tfor (const listener of afterRenderedNewPageListeners) {\r\n\t\t\t\tlistener(newPage, prevPage)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [currentRoute])\r\n}\r\n\r\nfunction useEffectOnChange(callback, dependencies) {\r\n\tif (dependencies.length !== 1) {\r\n\t\tthrow new Error('The `dependencies` array of `useEffectOnChange()` hook should only contain a single dependency')\r\n\t}\r\n\r\n\tconst value = dependencies[0]\r\n\r\n\t// This variable prevents the effect from triggering multiple times for same page.\r\n\t// I.e. the effect would only run on the actual change vs randomly.\r\n\t//\r\n\t// The `ref` is initialized with `undefined` rather than `currentRoute.current`.\r\n\t// That is to trigger `useEffect()` below at the initial page render.\r\n\t//\r\n\tconst prevValue = useRef()\r\n\r\n\t// `isInitialChange` variable is created here — outside of the effect —\r\n\t// to store \"is initial page load\" value that is derived from a `ref` value.\r\n\t// The reason is that the `ref` value, when referenced from inside `useEffect()` callback,\r\n\t// will always point to the very latest value in that `ref` at not to the `ref` value\r\n\t// that existed at the time of comparing the dependencies of the effect.\r\n\t// In other words, `ref` value inside effect callback might go out of sync with\r\n\t// itself at the time of evaluating the effect's dependencies.\r\n\t//\r\n\t// Using a variable allows \"capturing\" the `ref` value at a certain point in time\r\n\t// and then use that value later when the effect's callback function is run.\r\n\t// This is called \"closure\" in javascript language.\r\n\t//\r\n\t// For example, user navigates from `/items` to `/items/123` and \"new page\" event\r\n\t// is registered here, and `useEffect()` is ready to be run but the user quickly\r\n\t// navigates to `/contacts` page and all the `ref`s now store the values for that\r\n\t// `/contacts` page and not for the `/items/123` page, so the `useEffect()` callback\r\n\t// shouldn't read any values from those `ref`s since those `ref` values may have\r\n\t// already been overwritten.\r\n\t//\r\n\tconst isInitialChange = !prevValue.current\r\n\r\n\tuseEffect(() => {\r\n\t\tif (value !== prevValue.current) {\r\n\t\t\tprevValue.current = value\r\n\t\t\tcallback(value, { isInitialChange })\r\n\t\t}\r\n\t}, [value])\r\n}"],"mappings":";;;;;;AAAA;AAEA;AACA;AAA4D;AAAA;AAAA;AAAA;AAE7C,SAASA,2BAA2B,OAIhD;EAAA,IAHFC,YAAY,QAAZA,YAAY;IACZC,QAAQ,QAARA,QAAQ;IACRC,OAAO,QAAPA,OAAO;EAEP;EACAC,iBAAiB,CAAC,UAACH,YAAY,SAA+C;IAAA,IAA1BI,mBAAmB,SAApCC,eAAe;IACjD;IACA;IACA;IACA,IAAAC,qBAAY,EAAC,eAAe,EAAEL,QAAQ,CAAC;IACvC,IAAAK,qBAAY,EAAC,cAAc,EAAEJ,OAAO,CAAC;;IAErC;IACA;IACA,IAAAK,gCAAoB,GAAE;;IAEtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,IAAMC,iCAAiC,GAAG,IAAAC,wBAAe,EAAC,kCAAkC,CAAC;IAC7F,IAAID,iCAAiC,EAAE;MAAA,2CACfA,iCAAiC;QAAA;MAAA;QAAxD,oDAA0D;UAAA,IAA/CE,QAAQ;UAClBA,QAAQ,CAACR,OAAO,CAAC;QAClB;MAAC;QAAA;MAAA;QAAA;MAAA;IACF;;IAEA;IACA,IAAMS,6BAA6B,GAAG,IAAAC,uBAAc,EAAC,2BAA2B,CAAC;IACjF,IAAID,6BAA6B,EAAE;MAAA,4CACXA,6BAA6B;QAAA;MAAA;QAApD,uDAAsD;UAAA,IAA3CD,SAAQ;UAClBA,SAAQ,CAACR,OAAO,EAAED,QAAQ,CAAC;QAC5B;MAAC;QAAA;MAAA;QAAA;MAAA;IACF;EACD,CAAC,EAAE,CAACD,YAAY,CAAC,CAAC;AACnB;AAEA,SAASG,iBAAiB,CAACU,QAAQ,EAAEC,YAAY,EAAE;EAClD,IAAIA,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,gGAAgG,CAAC;EAClH;EAEA,IAAMC,KAAK,GAAGH,YAAY,CAAC,CAAC,CAAC;;EAE7B;EACA;EACA;EACA;EACA;EACA;EACA,IAAMI,SAAS,GAAG,IAAAC,aAAM,GAAE;;EAE1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMd,eAAe,GAAG,CAACa,SAAS,CAACE,OAAO;EAE1C,IAAAC,gBAAS,EAAC,YAAM;IACf,IAAIJ,KAAK,KAAKC,SAAS,CAACE,OAAO,EAAE;MAChCF,SAAS,CAACE,OAAO,GAAGH,KAAK;MACzBJ,QAAQ,CAACI,KAAK,EAAE;QAAEZ,eAAe,EAAfA;MAAgB,CAAC,CAAC;IACrC;EACD,CAAC,EAAE,CAACY,KAAK,CAAC,CAAC;AACZ"}