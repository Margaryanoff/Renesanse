"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = RouterContextValueProvider;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _RouterContext = _interopRequireDefault(require("./RouterContext.js"));
var _useCurrentRouteChangeEffect = _interopRequireDefault(require("./useCurrentRouteChangeEffect.js"));
var _getRoutePath = _interopRequireDefault(require("./getRoutePath.js"));
var _context = require("../context.js");
var _isSamePage = _interopRequireDefault(require("../isSamePage.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function RouterContextValueProvider(_ref) {
  var location = _ref.location,
    routes = _ref.routes,
    params = _ref.params,
    children = _ref.children;
  // This value is returned from `useRoute()` hook, so in case of changing this,
  // also change the value returned from `useRoute()` hook in `useRoute.js`.
  var getPageDescriptor = function getPageDescriptor() {
    return {
      location: location,
      params: params,
      path: (0, _getRoutePath["default"])(routes)
    };
  };
  var initialPage = (0, _react.useMemo)(function () {
    return getPageDescriptor();
  }, []);
  var currentPage = (0, _react.useRef)(initialPage);
  var currentPageInstantBack = (0, _react.useRef)(false);
  var currentPageNavigationContext = (0, _react.useRef)(undefined);
  var routerContextValue = (0, _react.useRef)({
    value: initialPage
  });

  // `location` becomes `undefined` every time when router starts `.load()` a new page.
  // Then it becomes non-`undefined` when the new page is about to be rendered.
  if (location) {
    // When a new `location` has been navigated to and is about to be rendered.
    if (location !== currentPage.current.location) {
      // See if it was a navigation from two different pages
      // or whether it was just a change of URL query parameters
      // while staying on the same "page".
      // Only if it didn't stay on the same page should it call any navigation listeners.
      if (!(0, _isSamePage["default"])(location, currentPage.current.location)) {
        var pageDescriptor = getPageDescriptor();

        // "Navigation/IsInstantBack" and "Navigation/Context" values that're later used in `useEffect()`
        // should be snapshotted at this state — at the same stage that the "new page" route is snapshotted.
        // Otherwise, those values might potentially correspond to some other navigation (subsequent)
        // that happens right after this (current) navigation.
        var instantBack = (0, _context.getFromContext)('Navigation/IsInstantBack');
        var navigationContext = (0, _context.getFromContext)('Navigation/Context');

        // Store the snapshotted values in `ref`s.
        currentPage.current = pageDescriptor;
        currentPageInstantBack.current = instantBack;
        currentPageNavigationContext.current = navigationContext;

        // Update `RouterContext` value.
        routerContextValue.current = {
          value: pageDescriptor
        };
        onNavigatedToAnotherPage(pageDescriptor, {
          instantBack: instantBack,
          navigationContext: navigationContext
        });
      }
    }
  }

  // `currentPageValue` variable is created here — outside of the effect —
  // to store `currentPage.current` `ref` value.
  // The reason is that the `ref` value, when referenced from inside `useEffect()` callback,
  // will always point to the very latest value in that `ref` at not to the `ref` value
  // that existed at the time of comparing the dependencies of the effect.
  // In other words, `ref` value inside effect callback might go out of sync with
  // itself at the time of evaluating the effect's dependencies.
  //
  // Using a variable allows "capturing" the `ref` value at a certain point in time
  // and then use that value later when the effect's callback function is run.
  // This is called "closure" in javascript language.
  //
  // For example, user navigates from `/items` to `/items/123` and "new page" event
  // is registered here, and `useEffect()` is ready to be run but the user quickly
  // navigates to `/contacts` page and all the `ref`s now store the values for that
  // `/contacts` page and not for the `/items/123` page, so the `useEffect()` callback
  // shouldn't read any values from those `ref`s since those `ref` values may have
  // already been overwritten.
  //
  var currentPageValue = currentPage.current;
  var currentPageInstantBackValue = currentPageInstantBack.current;
  var currentPageNavigationContextValue = currentPageNavigationContext.current;
  //
  var prevPage = (0, _context.getFromContext)('Root/NewPage');
  var newPage = (0, _react.useMemo)(function () {
    return {
      location: currentPageValue.location,
      route: currentPageValue.path,
      params: currentPageValue.params,
      instantBack: currentPageInstantBackValue,
      navigationContext: currentPageNavigationContextValue
    };
  }, [currentPageValue]);

  // If the page has changed, this effect will trigger the relevant listeners.
  (0, _useCurrentRouteChangeEffect["default"])({
    currentPage: currentPageValue,
    prevPage: prevPage,
    newPage: newPage
  });
  return _react["default"].createElement(_RouterContext["default"].Provider, {
    value: routerContextValue.current
  }, children);
}
var routeShape = {
  // A `route` doesn't always have a `path` property:
  // `found` router allows that when nesting routes.
  // Example: `{ Component: Wrapper, children: { path: '/', Component: Home } }`.
  path: _propTypes["default"].string
};
routeShape.children = _propTypes["default"].arrayOf(_propTypes["default"].shape(routeShape));
var routeType = _propTypes["default"].shape(routeShape);
RouterContextValueProvider.propTypes = {
  location: _propTypes["default"].shape({
    origin: _propTypes["default"].string,
    host: _propTypes["default"].string,
    hostname: _propTypes["default"].string,
    port: _propTypes["default"].string,
    protocol: _propTypes["default"].string,
    pathname: _propTypes["default"].string.isRequired,
    query: _propTypes["default"].objectOf(_propTypes["default"].string).isRequired,
    search: _propTypes["default"].string.isRequired,
    hash: _propTypes["default"].string.isRequired,
    // Miscellaneous (not used).

    // Some kind of a possibly-likely-unique key. Is empty for the initial page.
    key: _propTypes["default"].string,
    // History entry state. Can be empty.
    state: _propTypes["default"].any,
    // Index in browser history stack.
    // Seems to be `undefined` during the initial client-side render
    // after the page has been rendered on the server side.
    index: _propTypes["default"].number,
    // The "delta" in terms of `index` change as a result of the navigation.
    // For example, a regular hyperlink click is `delta: 1`.
    // A "Back" action is `delta: -1`. A user could go several pages "Back".
    delta: _propTypes["default"].number,
    // 'PUSH' or 'REPLACE' if the location was reached via history "push" or
    // "replace" action respectively. 'POP' on the initial location, or if
    // the location was reached via the browser "Back" or "Forward" buttons
    // or via `FarceActions.go`.
    action: _propTypes["default"].oneOf(['PUSH', 'REPLACE', 'POP']).isRequired
  }),
  routes: _propTypes["default"].arrayOf(routeType),
  params: _propTypes["default"].objectOf(_propTypes["default"].string),
  children: _propTypes["default"].node
};
function onNavigatedToAnotherPage(newPageDescriptor, _ref2) {
  var instantBack = _ref2.instantBack,
    navigationContext = _ref2.navigationContext;
  var newPage = {
    location: newPageDescriptor.location,
    route: newPageDescriptor.path,
    params: newPageDescriptor.params,
    instantBack: instantBack,
    navigationContext: navigationContext
  };
  var prevPage = (0, _context.getFromContext)('Root/NewPage');

  // Trigger "before new page will be rendered" listeners.
  var beforeRenderNewPageListeners = (0, _context.getFromContext)('Root/BeforeRenderNewPage');
  if (beforeRenderNewPageListeners) {
    var _iterator = _createForOfIteratorHelper(beforeRenderNewPageListeners),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var listener = _step.value;
        listener(newPage, prevPage);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  // Trigger "before another page will be rendered" listeners.
  var beforeRenderAnotherPageListeners = (0, _context.takeFromContext)('Navigation/BeforeRenderAnotherPage');
  if (beforeRenderAnotherPageListeners) {
    var _iterator2 = _createForOfIteratorHelper(beforeRenderAnotherPageListeners),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _listener = _step2.value;
        _listener(newPage);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
}
//# sourceMappingURL=RouterContextValueProvider.js.map