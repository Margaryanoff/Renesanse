"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useAfterNavigatedToAnotherPage;
var _useNavigationListenerEffect = _interopRequireDefault(require("./useNavigationListenerEffect.js"));
var _LeafRouteContext = require("./LeafRouteContext.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function useAfterNavigatedToAnotherPage(listener) {
  var isLeafRoute = (0, _LeafRouteContext.useIsLeafRoute)();
  if (!isLeafRoute) {
    throw new Error('`useAfterNavigatedToAnotherPage()` hook can only be used in a "leaf" route component');
  }
  (0, _useNavigationListenerEffect["default"])({
    contextKey: 'Navigation/AfterNavigatedToAnotherPage',
    listener: listener,
    // It has to not remove the listener on unmount because otherwise the listener wouldn't ever be called.
    // The reason is that by the time the new page has been rendered, the old one is already unmounted
    // and because of that its listeners would already have been removed when not passing `unlistenOnUnmount: false` parameter.
    //
    // Not removing the listener on unmount is fine becase it won't be accidentally re-added
    // by accidentally re-running `useEffect()` on the old page because it has already been unmounted.
    //
    unlistenOnUnmount: false
  });
}
//# sourceMappingURL=useAfterNavigatedToAnotherPage.js.map