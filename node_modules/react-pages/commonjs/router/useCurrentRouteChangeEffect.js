"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useCurrentRouteChangeEffect;
var _react = require("react");
var _context = require("../context.js");
var _clearNavigationState = _interopRequireDefault(require("./clearNavigationState.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function useCurrentRouteChangeEffect(_ref) {
  var currentRoute = _ref.currentRoute,
    prevPage = _ref.prevPage,
    newPage = _ref.newPage;
  // When a new location (page) has been rendered.
  useEffectOnChange(function (currentRoute, _ref2) {
    var isInitialPageRender = _ref2.isInitialChange;
    // When running in `<StrictMode/>`, React mounts and unmounts "effects" twice.
    // That's why `Root/PrevPage` and `Root/NewPage` are only set here, when an actual change happens.
    // Otherwise, `Root/PrevPage` would be the same as `Root/NewPage` as a result of executing the code below twice.
    (0, _context.setInContext)('Root/PrevPage', prevPage);
    (0, _context.setInContext)('Root/NewPage', newPage);

    // Clear any navigation-related context info
    // because the navigation has finished.
    (0, _clearNavigationState["default"])();

    // These listeners, if uncommented, should be snapshotted at the time of evaluating the dependencies.
    // Otherwise, by the time the new page gets mounted, its own "after navigated to another page" listener
    // will also be added to the list of listeners, so a weird situation would occur:
    // "after navigated to another page" listener of the new page would be triggered upon navigating to it.
    //
    // // Trigger navigation end listeners (for previous page).
    // const afterNavigatedToAnotherPageListeners = takeFromContext('Navigation/AfterNavigatedToAnotherPage')
    // if (afterNavigatedToAnotherPageListeners) {
    // 	if (isInitialPageRender) { // Why is this `if` condition here. Maybe remove it. Or change it.
    // 		for (const listener of afterNavigatedToAnotherPageListeners) {
    // 			listener(newPage)
    // 		}
    // 	}
    // }

    // Trigger navigation end listeners (for new page).
    var afterNavigatedToThisPageListeners = (0, _context.takeFromContext)('Navigation/AfterRenderedThisPage');
    if (afterNavigatedToThisPageListeners) {
      var _iterator = _createForOfIteratorHelper(afterNavigatedToThisPageListeners),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var listener = _step.value;
          listener(newPage);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    // Trigger "after new page has been rendered" listeners.
    var afterRenderedNewPageListeners = (0, _context.getFromContext)('Root/AfterRenderedNewPage');
    if (afterRenderedNewPageListeners) {
      var _iterator2 = _createForOfIteratorHelper(afterRenderedNewPageListeners),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _listener = _step2.value;
          _listener(newPage, prevPage);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, [currentRoute]);
}
function useEffectOnChange(callback, dependencies) {
  if (dependencies.length !== 1) {
    throw new Error('The `dependencies` array of `useEffectOnChange()` hook should only contain a single dependency');
  }
  var value = dependencies[0];

  // This variable prevents the effect from triggering multiple times for same page.
  // I.e. the effect would only run on the actual change vs randomly.
  //
  // The `ref` is initialized with `undefined` rather than `currentRoute.current`.
  // That is to trigger `useEffect()` below at the initial page render.
  //
  var prevValue = (0, _react.useRef)();

  // `isInitialChange` variable is created here — outside of the effect —
  // to store "is initial page load" value that is derived from a `ref` value.
  // The reason is that the `ref` value, when referenced from inside `useEffect()` callback,
  // will always point to the very latest value in that `ref` at not to the `ref` value
  // that existed at the time of comparing the dependencies of the effect.
  // In other words, `ref` value inside effect callback might go out of sync with
  // itself at the time of evaluating the effect's dependencies.
  //
  // Using a variable allows "capturing" the `ref` value at a certain point in time
  // and then use that value later when the effect's callback function is run.
  // This is called "closure" in javascript language.
  //
  // For example, user navigates from `/items` to `/items/123` and "new page" event
  // is registered here, and `useEffect()` is ready to be run but the user quickly
  // navigates to `/contacts` page and all the `ref`s now store the values for that
  // `/contacts` page and not for the `/items/123` page, so the `useEffect()` callback
  // shouldn't read any values from those `ref`s since those `ref` values may have
  // already been overwritten.
  //
  var isInitialChange = !prevValue.current;
  (0, _react.useEffect)(function () {
    if (value !== prevValue.current) {
      prevValue.current = value;
      callback(value, {
        isInitialChange: isInitialChange
      });
    }
  }, [value]);
}
//# sourceMappingURL=useCurrentRouteChangeEffect.js.map