"use strict";

var _preload = require("./preload.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
describe("load", function () {
  it("should collect preloaders from React Components", function () {
    var preload_1 = function preload_1() {};
    var preload_2 = function preload_2() {};
    var preload_3 = function preload_3() {};
    (0, _preload.collectPreloadersFromComponents)([null, _defineProperty({}, _preload.PRELOAD_METHOD_NAME, [{
      load: preload_1,
      client: true
    }]), undefined, _defineProperty({}, _preload.PRELOAD_METHOD_NAME, [{
      load: preload_2,
      blocking: false
    }, {
      load: preload_3,
      server: true
    }]), {}]).should.deep.equal([[{
      preload: preload_1,
      options: {
        client: true
      }
    }], [{
      preload: preload_2,
      options: {
        blocking: false
      }
    }, {
      preload: preload_3,
      options: {
        server: true
      }
    }]]);
  });
});
//# sourceMappingURL=preload.test.js.map