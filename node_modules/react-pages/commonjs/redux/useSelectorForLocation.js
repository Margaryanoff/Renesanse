"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useSelectorForLocation;
var _react = require("react");
var _reactRedux = require("react-redux");
var _useNavigationLocation = _interopRequireDefault(require("./navigation/useNavigationLocation.js"));
var _useLocation = _interopRequireDefault(require("../router/useLocation.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
// See the `README.md` section on `useSelectorForLocation()` for more details.
// In summary, it is a "safe" replacement for `useSelector()` hook
// that should be used to access page-specific data in Redux state.
// It guards against the situations when the user navigates from same page component
// to same page component, resulting in the page-specific state being corrupted
// during the transition period.
function useSelectorForLocation(selector) {
  // This is a fully-formed location object:
  // {
  //   "action": "POP",
  //   "origin": "http://localhost:1234",
  //   "protocol": "http:",
  //   "host": "localhost:1234",
  //   "hostname": "localhost",
  //   "port": "1234",
  //   "pathname": "/a",
  //   "search": "",
  //   "hash": "",
  //   "key": "wcyrb4:0",
  //   "index": 1,
  //   "delta": 0,
  //   "query": {}
  // }
  var location = (0, _useLocation["default"])();

  // This is an object of a very simplistic shape:
  // { pathname: '/a', search: '', hash: '' }
  // I.e. it doesn't have any propeties of a `normal` location:
  // `action: "POP"`, `key: "wcyrb4:0"`, etc.
  var navigationLocation = (0, _useNavigationLocation["default"])();
  var value = (0, _reactRedux.useSelector)(selector);
  var latestValueForThisLocation = (0, _react.useRef)();
  if (location.pathname === navigationLocation.pathname) {
    latestValueForThisLocation.current = value;
  }
  return latestValueForThisLocation.current;
}
//# sourceMappingURL=useSelectorForLocation.js.map