"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = normalizeSettings;
var _DefaultRootComponent = _interopRequireDefault(require("./DefaultRootComponent.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
// Normalizes common settings
function normalizeSettings(settings) {
  if (settings === undefined) {
    throw new Error("[react-pages] Common settings weren't passed.");
  }
  if (_typeof(settings) !== 'object') {
    throw new Error("[react-pages] Expected a settings object, got ".concat(_typeof(settings), ": ").concat(settings));
  }
  if (!settings.routes) {
    throw new Error("[react-pages] \"routes\" parameter is required");
  }
  if (!settings.reducers) {
    // throw new Error(`"reducers" parameter is required`)
    settings.reducers = {};
  }
  if (!settings.http) {
    settings.http = {};
  }
  if (settings.showLoadingInitially) {
    throw new Error("[react-pages] \"showLoadingInitially\" parameter was replaced with \"InitialLoadComponent\" parameter");
  }
  if (settings.InitialLoadComponent) {
    if (typeof settings.initialLoadHideAnimationDuration !== 'number') {
      throw new Error("[react-pages] \"initialLoadHideAnimationDuration\" parameter is required when using \"InitialLoadComponent\"");
    }
    if (typeof settings.initialLoadShowDelay !== 'number') {
      throw new Error("[react-pages] \"initialLoadShowDelay\" parameter is required when using \"InitialLoadComponent\"");
    }
  }
  if (settings.container) {
    throw new Error("[react-pages] \"container\" parameter was renamed to \"rootComponent\"");
  }
  if (settings.onError) {
    throw new Error("[react-pages] \"onError\" parameter was renamed to \"onLoadError\"");
  }

  // `settings.parseDates` property was renamed to `settings.http.findAndConvertIsoDateStringsToDateInstances`.
  if (typeof settings.parseDates === 'boolean') {
    if (typeof settings.http.findAndConvertIsoDateStringsToDateInstances !== 'boolean') {
      settings.http.findAndConvertIsoDateStringsToDateInstances = settings.parseDates;
      settings.parseDates = undefined;
    }
  }

  // Mark the "root" route, if there's one.
  var originalRoutes = settings.routes;
  var routes = originalRoutes;
  if (originalRoutes.length === 1) {
    var rootRoute = originalRoutes[0];
    if (rootRoute.children && rootRoute.children.length > 0) {
      routes = [_objectSpread(_objectSpread({}, rootRoute), {}, {
        _isRootRoute_: true
      })];
    }
  }

  // // Validate `pageStateReducerNames`.
  // if (settings.pageStateReducerNames) {
  // 	for (const reducerName of settings.pageStateReducerNames) {
  // 		if (!/Page$/.test(reducerName)) {
  // 			throw new Error(`\`pageStateReducerNames\` can only include reducer names that end with "Page". Received: ${reducerName}`)
  // 		}
  // 	}
  // }

  return _objectSpread(_objectSpread({}, settings), {}, {
    // Modified `routes`.
    routes: routes,
    // The default `rootComponent` wraps everything in a Redux `<Provider/>`.
    rootComponent: settings.rootComponent || _DefaultRootComponent["default"],
    // HTTP client settings.
    http: _objectSpread(_objectSpread({}, settings.http), {}, {
      // The default value for `findAndConvertIsoDateStringsToDateInstances` is historically `true`.
      findAndConvertIsoDateStringsToDateInstances: settings.http.findAndConvertIsoDateStringsToDateInstances === false ? false : true,
      // `settings.authentication` parameter was moved to `settings.http.authentication`.
      authentication: settings.http && settings.http.authentication || settings.authentication || {}
    })
  });
}
//# sourceMappingURL=normalize.js.map