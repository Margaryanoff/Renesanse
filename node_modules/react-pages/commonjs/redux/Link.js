"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _found = require("@catamphetamine/found");
var _instantNavigation = require("./client/instantNavigation.js");
var _actions = require("../router/actions.js");
var _isObject = _interopRequireDefault(require("../isObject.js"));
var _excluded = ["as", "to", "match", "navigationContext", "activeClassName", "activeStyle", "activePropName", "router", "exact"],
  _excluded2 = ["to"],
  _excluded3 = ["instantBack", "onClick", "to"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
// `found`'s `src/BaseLink.js` doesn't have a `.focus()` method
// and doesn't forward `ref` which prevents it from being
// focusable programmatically.
//
//https://github.com/4Catalyzer/found/blob/master/src/Link.js
// https://github.com/4Catalyzer/found/blob/master/src/BaseLink.js
//
// Therefore, copy-pasted it here and added `React.forwardRef()`.
//
function BaseLink(_ref, ref) {
  var Component = _ref.as,
    to = _ref.to,
    match = _ref.match,
    navigationContext = _ref.navigationContext,
    activeClassName = _ref.activeClassName,
    activeStyle = _ref.activeStyle,
    activePropName = _ref.activePropName,
    router = _ref.router,
    exact = _ref.exact,
    props = _objectWithoutProperties(_ref, _excluded);
  if (!(typeof to === 'string') && !(0, _isObject["default"])(to)) {
    throw new Error('[react-pages] `to` property (string or object) is required on a `<Link/>`');
  }
  var onClick = props.onClick,
    target = props.target;
  var onClick_ = (0, _react.useCallback)(function (event) {
    if (onClick) {
      onClick(event);
    }

    // Don't do anything if the user's onClick handler prevented default.
    // Otherwise, let the browser handle the link with the computed href if the
    // event wasn't an unmodified left click, or if the link has a target other
    // than _self.
    if (event.defaultPrevented || event.metaKey || event.altKey || event.ctrlKey || event.shiftKey || event.button !== 0 || target && target !== '_self') {
      return;
    }
    event.preventDefault();
    if (navigationContext) {
      (0, _actions.setNavigationContext)(navigationContext);
    }

    // FIXME: When clicking on a link to the same location in the browser, the
    // actual becomes a replace rather than a push. We may want the same
    // handling â€“ perhaps implemented in the Farce protocol.
    router.push(to);
  }, [onClick, target, to, router]);
  var href = router.createHref(to);
  var childrenIsFunction = typeof props.children === 'function';
  if (childrenIsFunction || activeClassName || activeStyle || activePropName) {
    var toLocation = router.createLocation(to);
    var active = router.isActive(match, toLocation, {
      exact: exact
    });
    if (childrenIsFunction) {
      return props.children({
        href: href,
        active: active,
        onClick: this.onClick
      });
    }
    if (active) {
      if (activeClassName) {
        props.className = props.className ? "".concat(props.className, " ").concat(activeClassName) : activeClassName;
      }
      if (activeStyle) {
        props.style = _objectSpread(_objectSpread({}, props.style), activeStyle);
      }
    }
    if (activePropName) {
      props[activePropName] = active;
    }
  }
  return _react["default"].createElement(Component, _objectSpread(_objectSpread({
    ref: ref
  }, props), {}, {
    href: href,
    onClick: onClick_
  }));
}
BaseLink = _react["default"].forwardRef(BaseLink);
BaseLink.propTypes = {
  as: _propTypes["default"].elementType.isRequired,
  to: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]).isRequired,
  match: _propTypes["default"].object.isRequired,
  activeClassName: _propTypes["default"].string,
  activeStyle: _propTypes["default"].object,
  activePropName: _propTypes["default"].string,
  navigationContext: _propTypes["default"].any,
  router: _propTypes["default"].object.isRequired,
  exact: _propTypes["default"].bool.isRequired,
  target: _propTypes["default"].string,
  onClick: _propTypes["default"].func,
  children: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func])
};
BaseLink.defaultProps = {
  as: 'a',
  exact: false
};
var Link_ = (0, _found.withRouter)(BaseLink);
Link_.displayName = 'Link';
var ExternalLink = _react["default"].forwardRef(function (_ref2, ref) {
  var to = _ref2.to,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return _react["default"].createElement('a', _objectSpread(_objectSpread({}, rest), {}, {
    href: to,
    ref: ref
  }));
});
var Link = function Link(_ref3, ref) {
  var instantBack = _ref3.instantBack,
    onClick = _ref3.onClick,
    to = _ref3.to,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  var onClickHandler = (0, _react.useCallback)(function (event) {
    if (onClick) {
      onClick(event);
    }
    if (event.defaultPrevented) {
      return;
    }
    (0, _instantNavigation.setInstantBackAbilityFlagForThisNavigation)(instantBack);
  }, [instantBack, onClick]);
  var isRelative = typeof to === 'string' ? isRelativeUrl(to) : isRelativeLocation(to);
  return _react["default"].createElement(isRelative ? Link_ : ExternalLink, _objectSpread(_objectSpread({
    ref: ref
  }, rest), {}, {
    to: to,
    onClick: onClickHandler
  }));
};
Link = _react["default"].forwardRef(Link);
Link.propTypes = {
  instantBack: _propTypes["default"].bool,
  onClick: _propTypes["default"].func
};
var _default = Link;
exports["default"] = _default;
function isRelativeUrl(url) {
  return url && url[0] === '/' && url[1] !== '/';
}
function isRelativeLocation(location) {
  // return something like `location.origin === useLocation().origin`
  return true;
}
//# sourceMappingURL=Link.js.map