"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROUTER_REDUCER_NAME = void 0;
exports["default"] = _createStore;
var _redux = require("redux");
var _extension = require("@redux-devtools/extension");
var _asynchronous = _interopRequireDefault(require("./middleware/asynchronous.js"));
var _router = _interopRequireDefault(require("./middleware/router.js"));
var _reducer = _interopRequireDefault(require("./reducer.js"));
var _constants = require("./constants.js");
var _naming = require("./naming.js");
var _validateRoutes = _interopRequireDefault(require("../router/validateRoutes.js"));
var _createGetDataFunctionsForRoutes = _interopRequireDefault(require("./createGetDataFunctionsForRoutes.js"));
var _createRenderFunctionsForRoutes = _interopRequireDefault(require("./createRenderFunctionsForRoutes.js"));
var _index = require("../router/index.js");
var _actions = require("../router/actions.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _createStore(_ref) {
  var data = _ref.initialState,
    createHistoryProtocol = _ref.createHistoryProtocol,
    httpClient = _ref.httpClient,
    stash = _ref.stash,
    settings = _ref.settings,
    options = _ref.options;
  var reducers = settings.reducers;
  var routes = settings.routes,
    pageStateReducerNames = settings.pageStateReducerNames,
    reduxMiddleware = settings.reduxMiddleware,
    reduxStoreEnhancers = settings.reduxStoreEnhancers,
    reduxEventNaming = settings.reduxEventNaming,
    http = settings.http,
    onLoadError = settings.onLoadError,
    getLocale = settings.getLocale,
    codeSplit = settings.codeSplit,
    load = settings.load;
  var server = options.server,
    devtools = options.devtools,
    stats = options.stats,
    context = options.context,
    onBeforeNavigate = options.onBeforeNavigate,
    onNavigationFinished = options.onNavigationFinished,
    getCookie = options.getCookie;
  (0, _validateRoutes["default"])(routes);
  reducers = markPageStateReducers(reducers, pageStateReducerNames);
  (0, _createGetDataFunctionsForRoutes["default"])(routes, {
    stash: stash,
    codeSplit: codeSplit,
    server: server,
    onLoadError: onLoadError,
    getLocale: getLocale,
    getCookie: getCookie,
    context: context
  });
  (0, _createRenderFunctionsForRoutes["default"])(routes, {
    stash: stash,
    codeSplit: codeSplit,
    server: server
  });

  // Redux middleware.
  var middleware = [];

  // Built-in middleware.
  middleware.push(
  // Asynchronous middleware (e.g. for HTTP Ajax calls).
  (0, _asynchronous["default"])({
    httpClient: httpClient,
    reduxEventNaming: reduxEventNaming,
    server: server,
    onError: http.onError,
    getErrorData: http.getErrorData
  }));
  if (!server) {
    middleware.push((0, _router["default"])({
      routes: routes,
      codeSplit: codeSplit,
      onBeforeNavigate: onBeforeNavigate,
      onNavigationFinished: onNavigationFinished,
      reportStats: stats,
      context: context,
      stash: stash
    }));
  }

  // Redux "store enhancers"
  var storeEnhancers = [];

  // Add custom Redux middleware to store "enhancers".
  // Developers may supply their own ("custom") Redux middleware.
  //
  // Custom Redux middleware should be added to the start of the "enhancers" chain.
  // Otherwise, `dispatch(redirect(...))` from custom middleware won't work
  // because `farce`'s "enhancer" wouldn't "see" any actions dispatched from custom middleware.
  // https://github.com/reduxjs/redux/issues/1051
  //
  // Redux middleware are applied in reverse order relative to how they're passed
  // to `applyMiddleware()` function (which is counter-intuitive).
  // https://stackoverflow.com/questions/44342948/why-were-doing-slice-reverse-in-redux-applymiddleware-function
  //
  if (reduxMiddleware) {
    storeEnhancers.push(_redux.applyMiddleware.apply(void 0, _toConsumableArray(getPropertyFromPropertyOrPropertyGetter(reduxMiddleware))));
  }

  // User may supply his own Redux store enhancers.
  if (reduxStoreEnhancers) {
    storeEnhancers.push.apply(storeEnhancers, _toConsumableArray(getPropertyFromPropertyOrPropertyGetter(reduxStoreEnhancers)));
  }
  storeEnhancers.push.apply(storeEnhancers, _toConsumableArray((0, _index.createRouterStoreEnhancers)(routes, createHistoryProtocol, {
    basename: settings.basename
  })));

  // Add Redux middleware to store "enhancers".
  //
  // Redux middleware are applied in reverse order relative to how they're passed
  // to `applyMiddleware()` function (which is counter-intuitive).
  // https://stackoverflow.com/questions/44342948/why-were-doing-slice-reverse-in-redux-applymiddleware-function
  //
  storeEnhancers.push(_redux.applyMiddleware.apply(void 0, middleware));

  // Create Redux store.
  var store = getStoreEnhancersComposer(server, devtools).apply(void 0, storeEnhancers)(_redux.createStore)(createReducer(reducers), data);

  // On the client side, add `hotReload()` function to the `store`.
  // (could just add this function to `window` but adding it to the `store` fits more)
  if (!server) {
    // `hotReload` helper function gives the web application means to hot reload its Redux reducers
    store.hotReload = function (reducers) {
      return store.replaceReducer(createReducer(reducers));
    };
  }

  // Initialize `found`.
  store.dispatch((0, _actions.initializeRouterAction)());

  // Return the Redux store
  return store;
}
function createReducer(reducers) {
  // Check for reserved reducer names.
  var _iterator = _createForOfIteratorHelper(RESERVED_REDUCER_NAMES),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var reducerName = _step.value;
      if (reducers[reducerName]) {
        throw new Error("\"".concat(reducerName, "\" reducer name is reserved."));
      }
    }
    // Check for `ReduxModule` autogenerated event names conflicts.
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  (0, _naming.checkForAutogeneratedEventNameCollision)(reducers);
  // Clone the object because it will be modified.
  reducers = _objectSpread({}, reducers);
  // Add router reducer.
  reducers[ROUTER_REDUCER_NAME] = _index.foundReducer;
  // Add `react-pages` reducer.
  reducers[_constants.REDUCER_NAME] = _reducer["default"];
  // Create the combined reducer.
  return (0, _redux.combineReducers)(reducers);
}
function getStoreEnhancersComposer(server, devtools) {
  // Redux DevTools aren't used on the server side
  if (server) {
    return _redux.compose;
  }

  // Custom behaviour
  if (devtools && devtools.compose) {
    return devtools.compose(devtools.options);
  }

  // With custom options
  if (devtools && devtools.options) {
    return (0, _extension.composeWithDevToolsLogOnlyInProduction)(devtools.options);
  }

  // Without custom options
  return _extension.composeWithDevToolsLogOnlyInProduction;
}

// `found` router library stores its state in "found" property of Redux state.
var ROUTER_REDUCER_NAME = 'found';

// `farce` history management library stores its state in "location" property of Redux state.
exports.ROUTER_REDUCER_NAME = ROUTER_REDUCER_NAME;
var HISTORY_REDUCER_NAME = 'location';
var RESERVED_REDUCER_NAMES = [_constants.REDUCER_NAME, ROUTER_REDUCER_NAME, HISTORY_REDUCER_NAME];

// Supports legacy ways of passing `reduxMiddleware` or `reduxStoreEnhancers`
// when those two could be functions returning arrays rather than just arrays.
function getPropertyFromPropertyOrPropertyGetter(property) {
  if (typeof property === 'function') {
    return property();
  } else {
    return property;
  }
}
function markPageStateReducers(reducers, pageStateReducerNames) {
  var newReducers = {};
  for (var _i = 0, _Object$keys = Object.keys(reducers); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    if (pageStateReducerNames && pageStateReducerNames.indexOf(key) >= 0) {
      newReducers[_constants.PAGE_STATE_REDUCER_NAME_PREFIX + key] = reducers[key];
    } else {
      newReducers[key] = reducers[key];
    }
  }
  return newReducers;
}
//# sourceMappingURL=store.js.map