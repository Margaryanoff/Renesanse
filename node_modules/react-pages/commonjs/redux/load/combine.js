"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineLoaders = combineLoaders;
exports.createPromiseFromLoaders = createPromiseFromLoaders;
exports["default"] = combineLoaders_;
exports.filterLoaders = filterLoaders;
var _flags = require("../../client/flags.js");
var _isObject = _interopRequireDefault(require("../../isObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Returns function returning a Promise
// which resolves when all the required page `load`s are resolved.
//
// If no loading is needed, then returns nothing.
//
function combineLoaders_(loaders, server, isInitialClientSideLoad, useSelector, dispatch, location, params, history, context, getCookie, loading) {
  // Set `.load({ ... })` function arguments,
  // and also set default `load` options.
  normalizeLoadFunctions(loaders, {
    dispatch: dispatch,
    useSelector: useSelector,
    location: location,
    params: params,
    history: history,
    server: server,
    // `getCookie` `load` parameter has been requested:
    // https://github.com/catamphetamine/react-website/issues/71
    getCookie: getCookie,
    // (optional)
    //
    // "Load Context" could hold any custom developer-defined variables
    // that could then be accessed inside `.load()` functions.
    //
    // To define a "load context":
    //
    // * Pass `getLoadContext()` function as an option to the client-side `render()` function.
    //   The options are the second argument of that function.
    //   The result of the function will be passed to each `load()` function as `context` parameter.
    //   The result of the function will be reused within the scope of a given web browser tab,
    //   i.e. `getLoadContext()` function will only be called once for a given web browser tab.
    //
    // * (if also using server-side rendering)
    //   Pass `getLoadContext()` function as an option to the server-side `webpageServer()` function.
    //   The options are the second argument of that function.
    //   The result of the function will be passed to each `load()` function as `context` parameter.
    //   The result of the function will be reused within the scope of a given HTTP request,
    //   i.e. `getLoadContext()` function will only be called once for a given HTTP request.
    //
    // `getLoadContext()` function recevies an argument object: `{ dispatch }`.
    // `getLoadContext()` function should return a "load context" object.
    //
    // Miscellaneous: `context` parameter will also be passed to `onNavigationFinished()`/`onBeforeNavigate()` functions.
    //
    context: context
  }, {
    server: server
  });

  // Only select those `load`s which
  // should be run in current circumstances.
  loaders = filterLoaders(loaders, server, isInitialClientSideLoad);

  // Construct a sequential chain out of loaders.
  // Because each of them could be either parallel or sequential.
  var chain = combineLoaders(loaders);

  // If there are no `load`s for this route, then exit.
  if (chain.length === 0) {
    return;
  }

  // Return a function that generates a `load()` `Promise` chain.
  var isCancelled = function isCancelled() {
    return loading.cancelled;
  };
  return function () {
    return createPromiseFromLoaders(chain, isCancelled);
  };
}

// Applies default `load` options
// and sets `load` function arguments.
function normalizeLoadFunctions(loaders, loadFunctionArgument, _ref) {
  var server = _ref.server;
  var _iterator = _createForOfIteratorHelper(loaders),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var loadersOfComponent = _step.value;
      var _iterator2 = _createForOfIteratorHelper(loadersOfComponent),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var loader = _step2.value;
          normalizeLoadFunction(loader, loadFunctionArgument, {
            server: server
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

// Applies default `load` options
// and sets `load` function arguments.
function normalizeLoadFunction(loader, loadFunctionArgument, _ref2) {
  var server = _ref2.server;
  var load = loader.load;
  loader.load = function () {
    return load(loadFunctionArgument);
  };

  // If Server-Side Rendering is not being used at all
  // then all `load`s must be marked as client-side ones.
  if (!server && !(0, _flags.isServerSideLoaded)()) {
    loader.options.client = true;
  }
}

// Selects only those `load`s which
// should be run in current circumstances.
function filterLoaders(loaders, server, isInitialClientSideLoad) {
  // `loaders` array will be mutated
  loaders = loaders.slice();
  loaders.forEach(function (_, i) {
    loaders[i] = loaders[i].filter(function (loader) {
      // Don't execute client-side-only `load`s on server side
      if (loader.options.client && server) {
        return false;
      }
      // Don't execute server-side-only `load`s on client side
      if (loader.options.server && !server) {
        return false;
      }
      // If it's initial client side load (after the page has been loaded),
      // then only execute those `load`s marked as "client-side-only".
      if (isInitialClientSideLoad && !loader.options.client) {
        return false;
      }
      return true;
    });
  });
  return loaders.filter(function (loadersOfComponent) {
    return loadersOfComponent.length > 0;
  });
}

// Constructs `load` chain.
//
// param `loaders` is an array of `loadersOfComponent`.
// `loadersOfComponent` is an array of all
// `load`s for a particular React component.
// Therefore `loaders` is an array of arrays.
function combineLoaders(loaders) {
  var chain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var parallel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  // If all `load`s have been visited
  if (loaders.length === 0) {
    if (parallel.length === 0) {
      return chain;
    }
    // Finalize pending parallel `load`s
    if (parallel.length === 1) {
      return chain.concat(parallel);
    }
    return chain.concat({
      parallel: parallel
    });
  }

  // `loadersOfComponent` is an array of all `load`s for a particular React component.
  var loader = loaders[0];
  loaders = loaders.slice(1);
  if (!isBlockingLoader(loader)) {
    return combineLoaders(loaders, chain, concat(parallel, getLoadFunctionForLoader(loader)));
  }
  if (parallel.length === 0) {
    return combineLoaders(loaders, concat(chain, getLoadFunctionForLoader(loader)), []);
  }
  return combineLoaders(loaders, chain.concat({
    parallel: concat(parallel, getLoadFunctionForLoader(loader))
  }), []);
}
function getLoadFunctionForLoader(loader) {
  // A list of same component's `load`s
  if (Array.isArray(loader)) {
    return combineLoaders(loader);
  }

  // Same component adjacent `load`
  return loader.load;
}
function isBlockingLoader(loader) {
  // A list of same component's `load`s
  if (Array.isArray(loader)) {
    // Determine the proper `blocking` option
    // for this component's `load`s.
    var _iterator3 = _createForOfIteratorHelper(loader),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var siblingLoader = _step3.value;
        // If any of component's `load`s are `blocking: true`
        // then all of them are `blocking: true`.
        if (siblingLoader.options.blocking) {
          return true;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return false;
  }

  // Same component adjacent `load`
  return loader.options.blockingSibling;
}

// Returns a `Promise` chain.
function createPromiseFromLoaders(chain, isCancelled) {
  if (typeof chain === 'function') {
    return chain().then(function (result) {
      if (isCancelled()) {
        return;
      }
      return result;
    });
  }
  if ((0, _isObject["default"])(chain)) {
    if (Array.isArray(chain.parallel)) {
      return Promise.all(chain.parallel.map(function (subChain) {
        return createPromiseFromLoaders(subChain, isCancelled);
      })).then(function (results) {
        if (isCancelled()) {
          return;
        }
        return results.filter(isResult).reduce(function (combined, result) {
          if (combined) {
            return mergeResults(combined, result);
          }
          return result;
        }, undefined);
      });
    } else {
      throw new Error('If loader chain element is an object then it should contain `parallel` property which should be an array of loader chains');
    }
  }
  if (Array.isArray(chain)) {
    return chain.reduce(function (promise, subChain) {
      return promise.then(function (result) {
        if (isCancelled()) {
          return;
        }
        return createPromiseFromLoaders(subChain, isCancelled).then(function (subChainResult) {
          if (isResult(result)) {
            if (isResult(subChainResult)) {
              return mergeResults(result, subChainResult);
            }
            return result;
          }
          return subChainResult;
        });
      });
    }, Promise.resolve());
  }
  throw new Error("Unsupported loader chain: ".concat(chain, " of type ").concat(_typeof(chain)));
}
var BLANK_RESULT = {};
function isResult(result) {
  if (result === undefined) {
    return false;
  }
  return (0, _isObject["default"])(result);
}
function mergeResults(result1, result2) {
  return _objectSpread(_objectSpread({}, result1), result2);
}
function concat(array, part) {
  if (Array.isArray(part) && part.length > 1) {
    // Pushes an array
    return array.concat([part]);
  }
  // Pushes a single element
  return array.concat(part);
}
//# sourceMappingURL=combine.js.map