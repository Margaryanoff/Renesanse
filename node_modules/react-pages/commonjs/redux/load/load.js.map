{"version":3,"file":"load.js","names":["LOAD_METHOD_NAME","load_","location","previousLocation","routePosition","routerArgs","codeSplit","server","getCookie","getLocale","context","dispatch","useSelector","isInstant","isInstantTransition_","loading","previousPreloading","getFromContext","setInContext","pending","cancelled","cancel","routes","params","addNavigationActionsSupportToDispatch","history","getHistory","concat","createHistoryEntry","combinedLoadFunction","routeParams","routeIndices","loaders","getLoadFunctions","isInitialClientSideLoad","createCombinedLoadFunction","Promise","resolve","promise","then","result","setHistory","error","type","LOAD_FAILED","event","REDIRECT_ACTION_TYPE","GOTO_ACTION_TYPE","clearNavigationState","redirectStatusCode","undefined","RedirectException","payload","collectLoadFunctionsFromComponents","components","filter","component","map","normalizeLoadFunction","load","rest","options","collectLoadFunctionsFromRoutes","_","ignoreUnchangedRoutes","items","previousRoutes","previousRoutesParameters","i","length","isEqual","slice","Array","isArray","route","getRoutePath","action","getHistoryAction","index","delta","console","log","isBackOrForwardNavigation","isInstantTransition","rootRoute","Error","collectLoadFunctions","Component","loadFunctions","leafComponentLoaders","loader","parameters","navigationContext"],"sources":["../../../lib/redux/load/load.js"],"sourcesContent":["import isEqual from 'lodash/isEqual.js'\r\n\r\nimport { RedirectException } from '../../router/index.js'\r\n\r\nimport clearNavigationState from '../../router/clearNavigationState.js'\r\n\r\nimport {\r\n\tnavigateThroughHistory,\r\n\tGOTO_ACTION_TYPE,\r\n\tREDIRECT_ACTION_TYPE\r\n} from '../../router/actions.js'\r\n\r\nimport getRoutePath from '../../router/getRoutePath.js'\r\n\r\nimport { setInContext, getFromContext } from '../../context.js'\r\n\r\nimport { isInstantTransition } from '../client/instantNavigation.js'\r\n\r\nimport createCombinedLoadFunction from './combine.js'\r\n\r\nimport restrictDispatchToPageState from './restrictDispatchToPageState.js'\r\n\r\nimport { LOAD_FAILED } from './actions.js'\r\n// import { SET_NAVIGATION_LOCATION } from '../navigation/actions.js'\r\n\r\nexport const LOAD_METHOD_NAME = 'load'\r\n\r\nexport default function load_({\r\n\tlocation,\r\n\tpreviousLocation,\r\n\troutePosition,\r\n\trouterArgs,\r\n\tcodeSplit,\r\n\tserver,\r\n\tgetCookie,\r\n\tgetLocale,\r\n\tcontext,\r\n\tdispatch,\r\n\tuseSelector\r\n}) {\r\n\t// If it's an instant \"Back\"/\"Forward\" navigation\r\n\t// then navigate to the page without loading it.\r\n\t// (has been previously loaded and is in Redux state)\r\n\tconst isInstant = isInstantTransition_({\r\n\t\tlocation,\r\n\t\tpreviousLocation,\r\n\t\tserver\r\n\t})\r\n\r\n\t// Preload status object.\r\n\t// `loading` holds the cancellation flag for this navigation process.\r\n\t// (e.g. loading `Promise` chain could be cancelled in case of a redirect)\r\n\tconst loading = {}\r\n\r\n\t// Can cancel previous loading (on the client side)\r\n\tlet previousPreloading\r\n\tif (!server) {\r\n\t\t// This key is not set with `Page/` prefix in order to not be cleared\r\n\t\t// when another page starts loading.\r\n\t\tpreviousPreloading = getFromContext('App/PageLoading')\r\n\t\tsetInContext('App/PageLoading', loading)\r\n\t}\r\n\r\n\tif (!server) {\r\n\t\t// If on the client side, then store the current pending navigation,\r\n\t\t// so that it can be cancelled when a new navigation process takes place\r\n\t\t// before the current navigation process finishes.\r\n\t\t//\r\n\t\t// If there's preceeding navigation pending,\r\n\t\t// then cancel that previous navigation.\r\n\t\tif (previousPreloading && previousPreloading.pending && !previousPreloading.cancelled) {\r\n\t\t\tpreviousPreloading.cancel()\r\n\t\t}\r\n\t}\r\n\r\n\tconst { routes, params } = routerArgs\r\n\r\n\t// Instrument `dispatch`.\r\n\t// `dispatch` for server side `throw`s a special \"redirect error\" on redirect.\r\n\t// `dispatch` for client side cancels current `load` on redirect.\r\n\tdispatch = addNavigationActionsSupportToDispatch(dispatch, server, loading)\r\n\r\n\t// Removed the restriction because there're valid real-world cases\r\n\t// when a `.load()` function could update state outside of the page state.\r\n\t//\r\n\t// // Detects changes to state when `dispatch()`ing actions from a `.load()` function.\r\n\t// // If there were any, those changes must've been done to \"page state\" parts of the Redux state.\r\n\t// // \"Page state\" parts of the Redux state should be declared in the settings in `pageStateReducerNames` parameter.\r\n\t// // The rationale is that it fixes the potential bugs appearing in page components\r\n\t// // when the parts of the Redux state they use unexpectedly get refreshed before navigating to another page.\r\n\t// if (!server && routePosition !== 'root') {\r\n\t// \tdispatch = restrictDispatchToPageState(dispatch, { useSelector })\r\n\t// }\r\n\r\n\tconst history = getHistory({ server })\r\n\t\t.concat(createHistoryEntry({ routes, location }))\r\n\r\n\t// Preload all the required data for this route (page)\r\n\tlet combinedLoadFunction\r\n\tif (!isInstant) {\r\n\t\tconst { routeParams, routeIndices } = routerArgs\r\n\r\n\t\tconst loaders = getLoadFunctions({\r\n\t\t\troutes,\r\n\t\t\troutePosition,\r\n\t\t\trouteParams,\r\n\t\t\trouteIndices,\r\n\t\t\tcodeSplit,\r\n\t\t\tserver\r\n\t\t})\r\n\r\n\t\tconst isInitialClientSideLoad = !server && !previousLocation\r\n\r\n\t\tcombinedLoadFunction = createCombinedLoadFunction(\r\n\t\t\tloaders,\r\n\t\t\tserver,\r\n\t\t\tisInitialClientSideLoad,\r\n\t\t\tuseSelector,\r\n\t\t\tdispatch,\r\n\t\t\tlocation,\r\n\t\t\tparams,\r\n\t\t\thistory,\r\n\t\t\tcontext,\r\n\t\t\tgetCookie,\r\n\t\t\tloading\r\n\t\t)\r\n\t}\r\n\r\n\t// If nothing to load, just move to the next middleware\r\n\tif (!combinedLoadFunction) {\r\n\t\treturn Promise.resolve()\r\n\t}\r\n\r\n\tconst promise = combinedLoadFunction()\r\n\r\n\tloading.pending = true\r\n\r\n\t// Preloading process cancellation\r\n\tloading.cancel = () => {\r\n\t\tloading.cancelled = true\r\n\t\t// If `bluebird` is used,\r\n\t\t// and promise cancellation has been set up,\r\n\t\t// then cancel the `Promise`.\r\n\t\t// http://bluebirdjs.com/docs/api/cancellation.html\r\n\t\tif (promise.cancel) {\r\n\t\t\t// `.catch()` is to suppress \"Uncaught promise rejection\" errors\r\n\t\t\tpromise.catch(() => {}).cancel()\r\n\t\t}\r\n\t}\r\n\r\n\treturn promise.then(\r\n\t\t// Navigate to the new page\r\n\t\t(result) => {\r\n\t\t\tloading.pending = false\r\n\t\t\t// If this navigation process was cancelled\r\n\t\t\t// before `load` finished its work,\r\n\t\t\t// then don't take any further steps on this cancelled navigation.\r\n\t\t\tif (loading.cancelled) {\r\n\t\t\t\t// Return `false` out of the `Promise`\r\n\t\t\t\t// indicating that the navigation was cancelled.\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\tsetHistory(history, { server })\r\n\t\t\treturn result\r\n\t\t},\r\n\t\t(error) => {\r\n\t\t\t// If this navigation process was cancelled\r\n\t\t\t// before `load` finished its work,\r\n\t\t\t// then don't take any further steps on this cancelled navigation.\r\n\t\t\tif (!loading.cancelled) {\r\n\t\t\t\tif (!server) {\r\n\t\t\t\t\tloading.error = error\r\n\t\t\t\t}\r\n\t\t\t\t// Emit loading error event.\r\n\t\t\t\t// Page loading indicator listens to it in order to become hidden.\r\n\t\t\t\tdispatch({ type: LOAD_FAILED, error })\r\n\r\n\t\t\t\t// This \"go to previous page\" code turned out not to work:\r\n\t\t\t\t// when `onError()` handler of `.load()` function\r\n\t\t\t\t// called `redirect()` function, it also resulted in a navigation,\r\n\t\t\t\t// and the two navigations conflicted with one another.\r\n\t\t\t\t// For example, this `navigateThroughHistory()` function call\r\n\t\t\t\t// was setting `Navigation/SkipLoad` flag to `true`\r\n\t\t\t\t// and that caused the next navigation via `redirect()` to not execute its `.load()`.\r\n\t\t\t\t//\r\n\t\t\t\t// // Revert the URL in the web browser's address bar\r\n\t\t\t\t// // to be the one for the \"previous\" location\r\n\t\t\t\t// // due to the process of navigating to the new location throwing an error.\r\n\t\t\t\t// if (previousLocation) {\r\n\t\t\t\t// \tdispatch(navigateThroughHistory(-1, { load: false }))\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// It doesn't dispatch `SET_NAVIGATION_LOCATION` action here\r\n\t\t\t\t// to reset the \"navigation location\" to the `previousLocation`\r\n\t\t\t\t// because that's supposed to be done in `lib/redux/load/getData.js`\r\n\t\t\t\t// by performing a forced redirect to the `previousLocation`.\r\n\t\t\t\t//\r\n\t\t\t\t// if (previousLocation) {\r\n\t\t\t\t// \t// Set `navigationLocation` to the \"previous\" (currently open) one\r\n\t\t\t\t// \t// instead of the \"next\" (was being loaded) one.\r\n\t\t\t\t// \tdispatch({ type: SET_NAVIGATION_LOCATION, location: previousLocation })\r\n\t\t\t\t// \t// If someone requires something like `useNavigationRoute()` hook in some future,\r\n\t\t\t\t// \t// it would have to also reset such \"navigation route\" to the previous one:\r\n\t\t\t\t// \t// dispatch({ type: SET_NAVIGATION_ROUTE, { location: previousLocation, params: previousParams, path: getRoutePath(previousRoutes) } })\r\n\t\t\t\t// }\r\n\t\t\t}\r\n\r\n\t\t\t// Update load status object.\r\n\t\t\tloading.pending = false\r\n\r\n\t\t\t// May be a server-side special \"redirect\" error.\r\n\t\t\tthrow error\r\n\t\t}\r\n\t)\r\n}\r\n\r\n// Instrument `dispatch`.\r\n// `dispatch` for server side `throw`s a special \"redirect error\" on redirect.\r\n// `dispatch` for client side cancels current `load` on redirect.\r\nfunction addNavigationActionsSupportToDispatch(dispatch, server, loading) {\r\n\treturn (event) => {\r\n\t\tswitch (event.type) {\r\n\t\t\t// In case of navigation from `load`.\r\n\t\t\tcase REDIRECT_ACTION_TYPE:\r\n\t\t\tcase GOTO_ACTION_TYPE:\r\n\t\t\t\t// Discard the currently ongoing loading.\r\n\t\t\t\t// (if some kind of a `bluebird` is used in place of `Promise`)\r\n\t\t\t\tif (loading.cancel) {\r\n\t\t\t\t\tloading.cancel()\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Clear any navigation-related context info\r\n\t\t\t\t// because it's gonna be a new (unrelated) navigation\r\n\t\t\t\t// as part of the upcoming redirect.\r\n\t\t\t\tclearNavigationState()\r\n\r\n\t\t\t\t// if (!server && getFromContext('Navigation/SkipLoad')) {\r\n\t\t\t\t// \tconsole.warn('Looks like you\\'re calling `dispatch(pushLocation())` or `dispatch(replaceLocation())` inside `load`. Call them in `onLoaded()` instead.')\r\n\t\t\t\t// }\r\n\t\t\t\t// 307 Temporary Redirect\r\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307\r\n\t\t\t\t// 308 Permanent Redirect\r\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308\r\n\t\t\t\tconst redirectStatusCode = undefined\r\n\t\t\t\tthrow new RedirectException(event.payload, redirectStatusCode)\r\n\t\t\tdefault:\r\n\t\t\t\t// Proceed normally.\r\n\t\t\t\treturn dispatch(event)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Finds all `load` methods\r\n// (they will be executed in parallel).\r\n//\r\n// Parameter — components - the `Component`s of the matched routes chain.\r\n//\r\n// Returns an array of `componentLoaders`.\r\n// `componentLoaders` is an array of all\r\n// `load`s for a particular React component:\r\n// objects having shape `{ load(), options }`.\r\n// Therefore the returned value is an array of arrays.\r\n//\r\nexport function collectLoadFunctionsFromComponents(components) {\r\n\t// Find all static `load` methods on the route component chain\r\n\treturn components\r\n\t\t// Some wrapper routes can have no `component`.\r\n\t\t// Select all components having `load`s.\r\n\t\t.filter(component => component && component[LOAD_METHOD_NAME])\r\n\t\t// Extract `load` functions and their options.\r\n\t\t.map(component => normalizeLoadFunction(component[LOAD_METHOD_NAME]).map(({ load, ...rest }) => ({\r\n\t\t\tload: load,\r\n\t\t\toptions: rest\r\n\t\t})))\r\n\t\t// // Flatten `load` functions and their options.\r\n\t\t// .reduce((all, load_and_options) => all.concat(load_and_options), [])\r\n}\r\n\r\nfunction collectLoadFunctionsFromRoutes(routes) {\r\n\t// Find all `.load()` properties on the route chain.\r\n\treturn routes\r\n\t\t.map(_ => _.load)\r\n\t\t.filter(_ => _)\r\n\t\t.map((load) => {\r\n\t\t\treturn normalizeLoadFunction(load).map(({ load, ...rest }) => ({\r\n\t\t\t\tload: load,\r\n\t\t\t\toptions: rest\r\n\t\t\t}))\r\n\t\t})\r\n\t\t// Flatten the array.\r\n\t\t// .reduce((all, load_and_options) => all.concat(load_and_options), [])\r\n}\r\n\r\n// A minor optimization for skipping `load`s\r\n// for those parent routes which haven't changed\r\n// as a result of a client-side navigation.\r\n//\r\n// On client side:\r\n//\r\n// Take the previous route components\r\n// (along with their parameters)\r\n// and the next route components\r\n// (along with their parameters),\r\n// and compare them side-by-side\r\n// filtering out the same top level components\r\n// (both having the same component classes\r\n//  and having the same parameters).\r\n//\r\n// Therefore `load`s could be skipped\r\n// for those top level components which remain\r\n// the same (and in the same state).\r\n// This would be an optimization.\r\n//\r\n// (e.g. the main route could be `load`ed only once - on the server side)\r\n//\r\n// At the same time, at least one component should be loaded:\r\n// even if navigating to the same page it still kinda makes sense to reload it.\r\n// (assuming it's not an \"anchor\" hyperlink navigation)\r\n//\r\n// Also, GET query parameters would also need to be compared, I guess.\r\n// But, I guess, it would make sense to assume that GET parameters\r\n// only affect the last routes component in the chain.\r\n// And, in general, GET query parameters should be avoided,\r\n// but that's not the case for example with search forms.\r\n// So here we assume that GET query parameters only\r\n// influence the last route component in the chain\r\n// which is gonna be reloaded anyway.\r\n//\r\nfunction ignoreUnchangedRoutes(items, routes, routeParams, previousRoutes, previousRoutesParameters) {\r\n\tif (previousRoutes) {\r\n\t\tlet i = 0\r\n\t\twhile (\r\n\t\t\ti < routes.length - 1 &&\r\n\t\t\tpreviousRoutes[i] === routes[i] &&\r\n\t\t\tisEqual(previousRoutesParameters[i], routeParams[i])\r\n\t\t) {\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\treturn items.slice(i)\r\n\t}\r\n\r\n\treturn items\r\n}\r\n\r\nfunction normalizeLoadFunction(load) {\r\n\tif (typeof load === 'function') {\r\n\t\tload = { load }\r\n\t}\r\n\tif (!Array.isArray(load)) {\r\n\t\tload = [load]\r\n\t}\r\n\treturn load\r\n}\r\n\r\nfunction getHistory({ server }) {\r\n\tif (server) {\r\n\t\treturn []\r\n\t}\r\n\t// This `NavigationHistory` is just a log of all navigation actions\r\n\t// performed by the user since they've opened the browser tab.\r\n\t// It's stored under `App/` just so that it doesn't get cleared\r\n\t// if there was an error during initial client-side render.\r\n\treturn getFromContext('App/NavigationHistory') || []\r\n}\r\n\r\nfunction setHistory(history, { server }) {\r\n\tif (server) {\r\n\t\treturn\r\n\t}\r\n\t// This `NavigationHistory` is just a log of all navigation actions\r\n\t// performed by the user since they've opened the browser tab.\r\n\t// It's stored under `App/` just so that it doesn't get cleared\r\n\t// if there was an error during initial client-side render.\r\n\tsetInContext('App/NavigationHistory', history)\r\n}\r\n\r\nfunction createHistoryEntry({ routes, location }) {\r\n\treturn {\r\n\t\t// A complete `path` for matched route chain.\r\n\t\t// E.g. \"/user/:userId/post/:postId\"\r\n\t\t// for matched URL \"/user/1/post/123?key=value\".\r\n\t\troute: getRoutePath(routes),\r\n\t\taction: getHistoryAction(location)\r\n\t}\r\n}\r\n\r\nfunction getHistoryAction(location) {\r\n\tif (location.index === 0) {\r\n\t\treturn 'start'\r\n\t} else if (location.action === 'POP') {\r\n\t\treturn location.delta === -1 ? 'back' : 'forward'\r\n\t} else if (location.action === 'PUSH') {\r\n\t\treturn 'push'\r\n\t} else if (location.action === 'REPLACE') {\r\n\t\treturn 'redirect'\r\n\t} else {\r\n\t\tconsole.error('[react-pages] Couldn\\'t get a history entry action for location')\r\n\t\tconsole.log(location)\r\n\t}\r\n}\r\n\r\nfunction isInstantTransition_({ location, previousLocation, server }) {\r\n\t// If it's a \"Back\"/\"Forward\" navigation\r\n\tconst isBackOrForwardNavigation =\r\n\t\tlocation.action === 'POP' &&\r\n\t\tlocation.delta !== 0 &&\r\n\t\t// During server-side rendering, `action` is \"POP\" and `delta` is `0`.\r\n\t\t!server\r\n\r\n\t// If it's an instant \"Back\"/\"Forward\" navigation\r\n\t// then navigate to the page without loading it.\r\n\t// (has been previously loaded and is in Redux state)\r\n\treturn isBackOrForwardNavigation && isInstantTransition(previousLocation, location)\r\n}\r\n\r\nfunction getLoadFunctions({\r\n\troutes,\r\n\troutePosition,\r\n\trouteParams,\r\n\trouteIndices,\r\n\tcodeSplit,\r\n\tserver\r\n}) {\r\n\tconst rootRoute = routes[0]\r\n\r\n\t// Client-side optimization.\r\n\t// Skips `load`s for routes that didn't change as a result of navigation.\r\n\tif (!server) {\r\n\t\tconst previousRoutes = getFromContext('Navigation/PreviousRoutes')\r\n\t\tconst previousRoutesParameters = getFromContext('Navigation/PreviousRoutesParameters')\r\n\r\n\t\troutes = ignoreUnchangedRoutes(routes, routeIndices, routeParams, previousRoutes, previousRoutesParameters)\r\n\t}\r\n\r\n\t// In older versions of this library, it was possible to assign a `.load()` function\r\n\t// to all `Component`s in a route chain for a given URL.\r\n\t// Later it was decided that a simpler structure with just the last `Component`\r\n\t// in the route chain having a `.load()` function is more convenient.\r\n\t// Because of that, there's really no more \"chain\" but rather just the last `Component`'s\r\n\t// `.load()` function and optionally a configurable \"pre\" `load()` function from `react-pages.js`\r\n\t// configuration file that gets executed before the `Component`'s `.load()` function.\r\n\r\n\tswitch (routePosition) {\r\n\t\tcase 'root':\r\n\t\t\t// If the \"root\" route is still considered for collecting `.load()` functions,\r\n\t\t\t// then use only its `.load()` function. Otherwise, no `.load()` function.\r\n\t\t\troutes = routes[0] === rootRoute ? [rootRoute] : []\r\n\t\t\tbreak\r\n\t\tcase 'leaf':\r\n\t\t\troutes = [routes[routes.length - 1]]\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported route position: \"${routePosition}\"`)\r\n\t}\r\n\r\n\t// Get all `load` functions in the route components chain.\r\n\tconst collectLoadFunctions = () => {\r\n\t\tif (codeSplit) {\r\n\t\t\treturn collectLoadFunctionsFromRoutes(routes)\r\n\t\t} else {\r\n\t\t\treturn collectLoadFunctionsFromComponents(routes.map(_ => _.Component))\r\n\t\t}\r\n\t}\r\n\r\n\tconst loadFunctions = collectLoadFunctions()\r\n\r\n\t// Add `navigationContext` parameter to the \"leaf\" loading function.\r\n\tif (!server) {\r\n\t\tif (routePosition === 'leaf') {\r\n\t\t\tif (loadFunctions.length > 0) {\r\n\t\t\t\tconst leafComponentLoaders = loadFunctions[loadFunctions.length - 1]\r\n\t\t\t\tloadFunctions[loadFunctions.length - 1] = leafComponentLoaders.map(\r\n\t\t\t\t\t(loader) => ({\r\n\t\t\t\t\t\t...loader,\r\n\t\t\t\t\t\tload: (parameters) => {\r\n\t\t\t\t\t\t\treturn loader.load({\r\n\t\t\t\t\t\t\t\t...parameters,\r\n\t\t\t\t\t\t\t\tnavigationContext: getFromContext('Navigation/Context')\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn loadFunctions\r\n}"],"mappings":"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"}