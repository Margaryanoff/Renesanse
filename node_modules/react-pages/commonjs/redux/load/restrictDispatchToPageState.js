"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = restrictDispatchToPageState;
var _constants = require("../constants.js");
// Detects changes to state when `dispatch()`ing actions from a `.load()` function.
// If there were any, those changes must've been done to "page state" parts of the Redux state.
// "Page state" parts of the Redux state should be declared in the settings in `pageStateReducerNames` parameter.
function restrictDispatchToPageState(dispatch, _ref) {
  var useSelector = _ref.useSelector;
  return function (action) {
    // Get "before" and "after" Redux states.
    var stateBefore = useSelector(function (state) {
      return state;
    });
    var prevStateKeys = Object.keys(stateBefore);
    var result = dispatch(action);
    var stateAfter = useSelector(function (state) {
      return state;
    });
    var newStateKeys = Object.keys(stateAfter);

    // Compare the "before" and "after" Redux states.
    for (var _i = 0, _prevStateKeys = prevStateKeys; _i < _prevStateKeys.length; _i++) {
      var key = _prevStateKeys[_i];
      // Every page implicitly modifies the `pages` reducer, so skip it.
      if (key !== _constants.REDUCER_NAME) {
        // If a Redux state key has been modified as a result of `dispatch()`ing the action.
        if (stateAfter[key] !== stateBefore[key]) {
          // If the modified Redux state key is not declared as "page state", show an error.
          if (key.indexOf(_constants.PAGE_STATE_REDUCER_NAME_PREFIX) !== 0) {
            onReduxStateKeyUpdateNotAllowed(key);
          }
        }
      }
    }

    // Return the result of the original `dispatch()` call.
    return result;
  };
}
function onReduxStateKeyUpdateNotAllowed(key) {
  // setTimeout(() => {
  throw new Error("Page loading function dispatched an action that modified `".concat(key, "` part of Redux state. Page loading functions are only allowed to modify the parts of Redux state that've specifically been allowed in `pageStateReducerNames: string[]` parameter of `react-pages` settings. Such parts of Redux state could then be accessed only via `useSelectorForPageState(reducerName, selectorFromReducerState)` or `usePageStateSelectorOutsideOfPage(reducerName, selectorFromReducerState)`"));
  // }, 0)
}
//# sourceMappingURL=restrictDispatchToPageState.js.map