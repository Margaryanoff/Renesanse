"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createGetDataFunctionsForRoutes;
var _getData = _interopRequireDefault(require("./load/getData.js"));
var _forEachLeafRoute = _interopRequireDefault(require("../router/forEachLeafRoute.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function createGetDataFunctionsForRoutes(routes, _ref) {
  var stash = _ref.stash,
    codeSplit = _ref.codeSplit,
    server = _ref.server,
    onLoadError = _ref.onLoadError,
    getLocale = _ref.getLocale,
    getCookie = _ref.getCookie,
    customContext = _ref.context;
  var getLoadFunction = function getLoadFunction(route) {
    return codeSplit ? route.load : route.Component.load;
  };

  // Set `getData` function on the root route's `Component`.
  // https://4catalyzer.github.io/found/docs/configuration/route-config#data-or-getdata
  if (getLoadFunction(routes[0])) {
    routes[0].getData = createGetDataFunction({
      routePosition: 'root',
      routes: routes,
      codeSplit: codeSplit,
      server: server,
      onError: onLoadError,
      getLocale: getLocale,
      getCookie: getCookie,
      context: customContext,
      stash: stash
    });
  }

  // Set `getData` function on the "leaf" route `Component`s.
  // https://4catalyzer.github.io/found/docs/configuration/route-config#data-or-getdata

  (0, _forEachLeafRoute["default"])(routes, function (leafRoute) {
    if (getLoadFunction(leafRoute)) {
      leafRoute.getData = createGetDataFunction({
        routePosition: 'leaf',
        routes: routes,
        codeSplit: codeSplit,
        server: server,
        onError: onLoadError,
        getLocale: getLocale,
        getCookie: getCookie,
        context: customContext,
        stash: stash
      });

      // `defer: true` instructs `getData` of this route and all of its descendants
      // to wait for all parent route `getData` promises.
      //
      // "Setting defer on a route will make the resolver defer calling its
      //  getData method and the getData methods on all of its descendants until
      //  all of its parent data promises have resolved."
      //
      // https://4catalyzer.github.io/found/docs/configuration/route-config
      leafRoute.defer = true;
    }
  });
}
function createGetDataFunction(parameters) {
  // The `context` parameter is the `matchContext` parameter that's passed in `./lib/router/index.js`.
  // https://4catalyzer.github.io/found/docs/configuration/route-config#data-or-getdata
  return function (_ref2) {
    var params = _ref2.params,
      _ref2$context = _ref2.context,
      _dispatch = _ref2$context.dispatch,
      getState = _ref2$context.getState;
    return (0, _getData["default"])(_objectSpread(_objectSpread({}, parameters), {}, {
      params: params,
      dispatch: function dispatch(action) {
        // This `if` prevents an error message in console:
        // "Error: Actions may not have an undefined "type" property. You may have misspelled an action type string constant.".
        // That error message was appearing when `{origin: 'load'}` action was dispatched
        // as a result of someone accidentally calling `dispatch()` with no action argument.
        if (action) {
          action = _objectSpread(_objectSpread({}, action), {}, {
            // The `origin: "load"` parameter is used in `middleware/asynchronous.js`
            // to detect HTTP calls originating from `load()` functions.
            origin: 'load'
          });
        }
        return _dispatch(action);
      },
      getState: getState
    }));
  };
}
//# sourceMappingURL=createGetDataFunctionsForRoutes.js.map