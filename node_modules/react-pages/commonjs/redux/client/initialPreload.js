"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hideInitialPreload = hideInitialPreload;
exports.showInitialPreload = showInitialPreload;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _Loading = require("../../components/Loading.js");
var _reactRender2 = _interopRequireDefault(require("../../client/reactRender.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// In cases when the initial page immediately redirects
// to another page (for example, to a "not found" page),
// a `RedirectException` is thrown in `setUpAndRender()` function
// in which case that function re-runs from scratch.
//
// That would result in `showInitialPreload()` function
// getting called multiple times, resulting in it creating
// multiple `<LoadingContainer/>` DOM Elements.
//
// Therefore, when calling `hideInitialPreload()`,
// it should assume there're multiple initial preloaders on apage.

// let containers = []
// let refs = []

var onHideInitialPreloadListeners = [];
var shouldShowInitialPreload = true;
function LoadingContainer(_ref, ref) {
  var onHidden = _ref.onHidden,
    addHiddenListener = _ref.addHiddenListener;
  var _useState = (0, _react.useState)(true),
    _useState2 = _slicedToArray(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];

  // const onFinishedLoadingCallback = useRef()
  var onHiddenTimer = (0, _react.useRef)();

  // // Provides a `setLoading()` instance method.
  // useImperativeHandle(ref, () => ({
  // 	setFinishedLoading: (callback) => {
  // 		onFinishedLoadingCallback.current = callback
  // 		setLoading(false)
  // 	}
  // }), [
  // 	onFinishedLoadingCallback,
  // 	setLoading
  // ])

  // useEffect(() => {
  // 	if (!loading) {
  // 		onFinishedLoadingCallback.current()
  // 		onFinishedLoadingCallback.current = undefined
  // 	}
  // }, [loading])

  var onHide = function onHide() {
    setLoading(false);
    onHiddenTimer.current = setTimeout(onHidden, 160);
  };
  (0, _react.useEffect)(function () {
    if (!shouldShowInitialPreload) {
      onHide();
    } else {
      addHiddenListener(onHide);
    }
    return function () {
      clearTimeout(onHiddenTimer.current);
    };
  }, []);
  return _react["default"].createElement(_Loading.Loading, {
    initial: loading,
    immediate: loading,
    pending: loading
  });
}
LoadingContainer = _react["default"].forwardRef(LoadingContainer);
function showInitialPreload() {
  var container = document.createElement('div');
  // containers.push(container)

  // Will prepend `element` to `<body/>` (even if `<body/>` is empty).
  // https://stackoverflow.com/questions/2007357/how-to-set-dom-element-as-the-first-child
  document.body.insertBefore(container, document.body.firstChild);

  // const setRef = (ref) => {
  // 	// Update the `ref` that corresponds to the `container`.
  // 	const index = containers.indexOf(container)
  // 	if (index >= 0) {
  // 		refs[index] = ref
  // 	}
  // }

  var _reactRender = (0, _reactRender2["default"])(_react["default"].createElement(LoadingContainer, {
      // ref: setRef,
      onHidden: function onHidden() {
        // https://github.com/facebook/react/issues/21441#issuecomment-833298271
        // ReactDOM.unmountComponentAtNode(container)
        root.unmount();
        document.body.removeChild(container);
      },
      addHiddenListener: function addHiddenListener(listener) {
        onHideInitialPreloadListeners.push(listener);
      }
    }), container),
    root = _reactRender.root;
}
function hideInitialPreload() {
  // const container = containers.pop()
  // const ref = refs.pop()
  // ref.setFinishedLoading(() => {
  // 	setTimeout(() => {
  // 		ReactDOM.unmountComponentAtNode(container)
  // 		document.body.removeChild(container)
  // 	}, 160)
  // })
  var _iterator = _createForOfIteratorHelper(onHideInitialPreloadListeners),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var onHideInitialPreloadListener = _step.value;
      onHideInitialPreloadListener();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
//# sourceMappingURL=initialPreload.js.map