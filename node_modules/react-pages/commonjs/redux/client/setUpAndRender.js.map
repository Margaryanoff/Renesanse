{"version":3,"file":"setUpAndRender.js","names":["setUpAndRender_","settings","options","window","_ReactPages_InitialPage_ReloadDataOnClientRender","setInContext","_ReactPages_ReduxStateServerSideSnapshot","_ReactPages_ServerSideRendered","_ReactPages_ServerSideRenderedEmpty","_ReactPages_Locales","stash","Stash","setUpAndRender","redirectException","undefined","normalizeSettings","resetInstantNavigationChain","isServerSideLoaded","store","createStore","onStoreCreated","InitialLoadComponent","initialLoadShowDelay","initialLoadHideAnimationDuration","shouldShowInitialLoad","Boolean","showInitialLoad","Component","showDelay","hideAnimationDuration","onSuccess","result","clearInContext","hideInitialLoad","dispatch","redirect","document","location","eventPayload","takeFromContext","type","_RESOLVE_MATCH","payload","onError","error","RedirectException","Error","status","redirectStatusCode","clearAllInContextExcept","goto","RESOLVE_MATCH","getMatch","getState","UNLISTEN_BROWSER_HISTORY_EVENTS","finishWith","func","getFromContext","onFoundRouterReady","clientSideRender","rootComponent","render","renderParameters","then"],"sources":["../../../lib/redux/client/setUpAndRender.js"],"sourcesContent":["import clientSideRender from '../../client/render.js'\r\nimport { isServerSideLoaded } from '../../client/flags.js'\r\nimport { redirect, RESOLVE_MATCH, _RESOLVE_MATCH, UNLISTEN_BROWSER_HISTORY_EVENTS, goto } from '../../router/actions.js'\r\nimport { getMatch, RedirectException } from '../../router/index.js'\r\nimport { onFoundRouterReady } from './router.js'\r\nimport normalizeSettings from '../normalize.js'\r\nimport Stash from '../Stash.js'\r\nimport render from './render.js'\r\nimport createStore from './createStore.js'\r\nimport { resetInstantNavigationChain } from './instantNavigation.js'\r\nimport showInitialLoad from './initialLoad/showInitialLoad.js'\r\nimport hideInitialLoad from './initialLoad/hideInitialLoad.js'\r\nimport { getFromContext, setInContext, takeFromContext, clearInContext, clearAllInContextExcept } from '../../context.js'\r\n\r\n// This function is what's gonna be called from the project's code on the client-side.\r\n//\r\n// There are two passes of client-side render happening here.\r\n// React has the concept of \"re-hydration\" which demands that\r\n// the initial client-side React rendering results be equal to\r\n// the server-side React rendering results, character-by-character.\r\n// Otherwise it complains.\r\n// That's the reason why the application on client side first performs\r\n// a \"dummy\" rendering without resolving any `load`s, just to complete\r\n// the React \"hydration\" process, and only when the \"hydration\" process finishes\r\n// does it perform the second pass of rendering the page,\r\n// now resolving all client-side `load`s.\r\n// Therefore, the first pass of `.render()`Â always happens with data missing\r\n// if that data is loaded in \"client-side only\" `load`s.\r\n// (that is, the `load`s configured with `{ client: true }`).\r\n//\r\n// If React \"re-hydration\" step didn't exist\r\n// then the library would first execute all client-side `load`s\r\n// and only then would it render the application.\r\n// That would be more intuitive and convenient for developers I guess.\r\n//\r\nexport default function setUpAndRender_(settings, options) {\r\n\tif (window._ReactPages_InitialPage_ReloadDataOnClientRender) {\r\n\t\tsetInContext('InitialPage/RepeatLoadOnClientSideRender', true)\r\n\t\tdelete window._ReactPages_InitialPage_ReloadDataOnClientRender\r\n\t}\r\n\r\n\tif (window._ReactPages_ReduxStateServerSideSnapshot) {\r\n\t\tsetInContext('App/ReduxStateServerSideSnapshot', window._ReactPages_ReduxStateServerSideSnapshot)\r\n\t\tdelete window._ReactPages_ReduxStateServerSideSnapshot\r\n\t}\r\n\r\n\tif (window._ReactPages_ServerSideRendered) {\r\n\t\tsetInContext('InitialPage/ServerSideRendered', true)\r\n\t\tdelete window._ReactPages_ServerSideRendered\r\n\t}\r\n\r\n\tif (window._ReactPages_ServerSideRenderedEmpty) {\r\n\t\tsetInContext('InitialPage/ServerSideRenderedEmpty', true)\r\n\t\tdelete window._ReactPages_ServerSideRenderedEmpty\r\n\t}\r\n\r\n\tif (window._ReactPages_Locales) {\r\n\t\tsetInContext('App/Locales', window._ReactPages_Locales)\r\n\t\tdelete window._ReactPages_Locales\r\n\t}\r\n\r\n\t// Create utility data stash.\r\n\t//\r\n\t// If `setUpAndRender()` is called second time after the first one resulted in an error,\r\n\t// the `stash` data from first one will be reused in the second one\r\n\t// because it contains the `props` returned from `.load()` function of the root route component.\r\n\t// Otherwise, the root route component wouldn't receive those props after `setUpAndRender()`.\r\n\t//\r\n\tconst stash = new Stash()\r\n\r\n\treturn setUpAndRender(settings, options, { redirectException: undefined, stash })\r\n}\r\n\r\nfunction setUpAndRender(settings, options, { redirectException, stash }) {\r\n\tsettings = normalizeSettings(settings)\r\n\r\n\t// Reset \"instant back\" on page reload\r\n\t// since Redux state is cleared.\r\n\t// \"instant back\" chain is stored in `window.sessionStorage`\r\n\t// and therefore it survives page reload.\r\n\tresetInstantNavigationChain()\r\n\r\n\t// The first pass of initial client-side render\r\n\t// is to render the markup which matches server-side one.\r\n\t// The second pass will be to render after resolving `getData`.\r\n\tif (isServerSideLoaded()) {\r\n\t\tsetInContext('InitialPage/RepeatingServerSideRenderOnClientSide', true)\r\n\t\tsetInContext('InitialPage/SkipLoad', true)\r\n\t}\r\n\r\n\t// Create a Redux store (and, internally, an HTTP client).\r\n\t// Mutate `settings` because they're passed again \"recursively\"\r\n\t// in a `catch` clause below.\r\n\tconst store = createStore(settings, options, { stash })\r\n\r\n\t// `onStoreCreated` listener allows the application to get access\r\n\t// to the `store` as soon as it has been created.\r\n\t//\r\n\t// What could it be used for?\r\n\t//\r\n\t// * Acadeum Course Share client-side-only website uses it to\r\n\t//   pre-\"bind\" all \"action creators\" to the newly created `store`,\r\n\t//   so that later it could call them without `dispatch()`:\r\n\t//   just `action()` instead of `dispatch(action())`.\r\n\t//   It's not necessarily a recommended approach. More like the opposite,\r\n\t//   due to it being unconventional. But Acadeum's website has already\r\n\t//   been written that way, so why rewrite it when it works.\r\n\t//\r\n\t// So seems like this `onStoreCreated()` function is a legacy one\r\n\t// that is currently only used at Acadeum.\r\n\t//\r\n\tif (options && options.onStoreCreated) {\r\n\t\toptions.onStoreCreated(store)\r\n\t}\r\n\r\n\tconst {\r\n\t\tInitialLoadComponent,\r\n\t\tinitialLoadShowDelay,\r\n\t\tinitialLoadHideAnimationDuration\r\n\t} = settings\r\n\r\n\tconst shouldShowInitialLoad = Boolean(InitialLoadComponent) && !isServerSideLoaded()\r\n\r\n\t// Render loading indicator in case of client-side-only rendering\r\n\t// because the main application React tree won't be rendered\r\n\t// until `load`s finish.\r\n\tif (shouldShowInitialLoad) {\r\n\t\tshowInitialLoad({\r\n\t\t\tComponent: InitialLoadComponent,\r\n\t\t\tshowDelay: initialLoadShowDelay,\r\n\t\t\thideAnimationDuration: initialLoadHideAnimationDuration\r\n\t\t})\r\n\t}\r\n\r\n\tconst onSuccess = (result) => {\r\n\t\t// `ReduxStateServerSideSnapshot` data may be reused in a second `setUpAndRender()`\r\n\t\t// if the first one throws an error, so it's cleared here, after a `setUpAndRender()`\r\n\t\t// has finished rendering the app, and also it's stored under `App/` namespace\r\n\t\t// rather than `InitialPage/` namespace for the same reason.\r\n\t\tclearInContext('App/ReduxStateServerSideSnapshot')\r\n\r\n\t\t// Hide the \"initial\" loading indicator.\r\n\t\tif (shouldShowInitialLoad) {\r\n\t\t\thideInitialLoad()\r\n\t\t}\r\n\r\n\t\t// Perform the second pass of initial client-side rendering.\r\n\t\t// The second pass resolves `getData` on routes.\r\n\t\t// (which means it resolves all client-side `load`s)\r\n\t\tif (isServerSideLoaded()) {\r\n\t\t\tstore.dispatch(redirect(document.location))\r\n\t\t} else {\r\n\t\t\t// `RESOLVE_MATCH` is not being dispatched\r\n\t\t\t// for the first render for some reason.\r\n\t\t\t// https://github.com/4Catalyzer/found/issues/202\r\n\t\t\t// * With server-side rendering enabled\r\n\t\t\t//   initially there are two rendering passes\r\n\t\t\t//   and therefore `RESOLVE_MATCH` does get dispatched\r\n\t\t\t//   after the page is initialized and rendered.\r\n\t\t\t// * With server-side rendering disabled\r\n\t\t\t//   `RESOLVE_MATCH` does not get dispatched\r\n\t\t\t//   therefore a custom (\"fake\") `_RESOLVE_MATCH` event\r\n\t\t\t//   should be dispatched manually.\r\n\t\t\tconst eventPayload = takeFromContext('InitialPage/FakeResolveMatchEventPayload')\r\n\t\t\tstore.dispatch({\r\n\t\t\t\ttype: _RESOLVE_MATCH,\r\n\t\t\t\tpayload: eventPayload\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n\r\n\tconst onError = (error) => {\r\n\t\t// Hide the \"initial\" loading indicator.\r\n\t\tif (shouldShowInitialLoad) {\r\n\t\t\thideInitialLoad()\r\n\t\t}\r\n\r\n\t\t// Catches redirects from:\r\n\t\t// * `RedirectExpections` thrown from `route.Component.load()`\r\n\t\t// * `RedirectExpections` thrown from `settings.onLoadError()`\r\n\t\t// * `RedirectExpections` thrown from `permanentRedirectTo` routes\r\n\t\t//\r\n\t\t// The `!redirectException` condition prevents infinite loops of\r\n\t\t// redirecting to an `/error` page.\r\n\t\t//\r\n\t\tif ((error instanceof RedirectException) && !redirectException) {\r\n\t\t\t// `error.location` is gonna be the `location` it redirects to.\r\n\t\t\t// If the route wasn't found then `error.location` is `undefined`.\r\n\t\t\tif (!error.location) {\r\n\t\t\t\tconst error = new Error('Not found')\r\n\t\t\t\terror.status = 404\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\r\n\t\t\tconst redirectStatusCode = error.status\r\n\r\n\t\t\t// Reset all `react-pages` flags related to:\r\n\t\t\t// * the current page properties.\r\n\t\t\t// * the current navigation properties.\r\n\t\t\t// * the navigation chain so far.\r\n\t\t\tclearAllInContextExcept('App/')\r\n\r\n\t\t\t// Change current location.\r\n\t\t\t// Emits an `UPDATE_MATCH` event.\r\n\t\t\t// `error.location` can be a `string`.\r\n\t\t\t// Maybe it could be a location `object` too.\r\n\t\t\t//\r\n\t\t\t// `dispatch(goto())` is used here instead of just `dispatch(pushLocation())`\r\n\t\t\t// in order to not skip calling the `.load()` function the new page.\r\n\t\t\t//\r\n\t\t\tstore.dispatch(goto(error.location))\r\n\r\n\t\t\t// Simply emitting an `UPDATE_MATCH` event again\r\n\t\t\t// wouldn't work for the second navigation\r\n\t\t\t// the way it worked for the initial one.\r\n\t\t\t//\r\n\t\t\t// The reason is that `found` router has a special case for handling\r\n\t\t\t// the \"initial\" `UPDATE_MATCH` event:\r\n\t\t\t//\r\n\t\t\t// https://github.com/4Catalyzer/found/blob/63a44a633159d6e16161e407fa4d6869fdb70623/src/foundReducer.ts\r\n\t\t\t//\r\n\t\t\t// switch (type) {\r\n\t\t\t//   case ActionTypes.UPDATE_MATCH:\r\n\t\t\t//     // For the initial match, set resolvedMatch too. There's no previous\r\n\t\t\t//     // result to keep rendered, plus this simplifies server rendering.\r\n\t\t\t//     return {\r\n\t\t\t//       match: payload,\r\n\t\t\t//       resolvedMatch: state ? state.resolvedMatch : payload\r\n\t\t\t//     }\r\n\t\t\t//   ...\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// For that reason, first set `state.found.resolvedMatch` to `state.found.match`\r\n\t\t\t// by emitting a `RESOLVE_MATCH` event, and only after that emit a new `UPDATE_MATCH` event\r\n\t\t\t// to run a new navigation cycle.\r\n\t\t\t//\r\n\t\t\tsetInContext('Navigation/IgnoreResolveMatchRouterEvent', true)\r\n\t\t\tstore.dispatch({\r\n\t\t\t\ttype: RESOLVE_MATCH,\r\n\t\t\t\tpayload: getMatch(store.getState())\r\n\t\t\t})\r\n\r\n\t\t\t// Remove `popstate` window event listener that was set up\r\n\t\t\t// by `farce`'s `historyMiddleware` when it was created.\r\n\t\t\t// The `store` will be re-created from scratch for a re-render,\r\n\t\t\t// and any window history listeners will be set up again.\r\n\t\t\t// Without this removal, two listeners would respond to window's\r\n\t\t\t// `popstate` events.\r\n\t\t\tstore.dispatch({\r\n\t\t\t\ttype: UNLISTEN_BROWSER_HISTORY_EVENTS\r\n\t\t\t})\r\n\r\n\t\t\t// `farce`'s `scroll-behavior` also sets up a listener\r\n\t\t\t// for window's `beforeunload` event, but it does so\r\n\t\t\t// in `componentDidMount()` (or `useEffect()`, when rewritten in effects)\r\n\t\t\t// of `found-scroll/ScrollManager.js`.\r\n\t\t\t//\r\n\t\t\t// `componentDidMount()` (or `useEffect()`, when rewritten in effects)\r\n\t\t\t// only gets called after the component got rendered, and `onError`\r\n\t\t\t// is only called when `<Router/>` didn't get rendered due to an error,\r\n\t\t\t// so there's no need to unlisten window's `beforeunload` event\r\n\t\t\t// because that listener hasn't been set up yet.\r\n\r\n\t\t\t// If an error happens inside `clientSideRender()`\r\n\t\t\t// then the `<Router/>` element won't be mounted on the page.\r\n\t\t\t// Because of that, if `clientSideRender()` redirected to an error page\r\n\t\t\t// in case of an error, the error page wouldn't be rendered and there'd be a blank screen.\r\n\t\t\t// To work around that, in case of an error, the whole rendering framework\r\n\t\t\t// is recreated and restarted from scratch, and then it renders the error page.\r\n\t\t\treturn setUpAndRender(settings, options, { redirectException: error, stash })\r\n\t\t}\r\n\r\n\t\tthrow error\r\n\t}\r\n\r\n\tfunction finishWith(func) {\r\n\t\t// If the `<Router/>` element has been rendered,\r\n\t\t// it must wait for its `componentDidMount()` to be called first\r\n\t\t// in order to proceed on doing anything else\r\n\t\t// because otherwise the router is disfunctional within the timeframe\r\n\t\t// starting from `render()` and ending with `componentDidMount()`.\r\n\t\t// `onFoundRouterReady()` function was created to skip that timeframe.\r\n\t\t// See `componentDidMount()` in `found/src/createBaseRouter.tsx` for the implementation.\r\n\t\tif (getFromContext('App/HasBeenRendered')) {\r\n\t\t\treturn onFoundRouterReady(() => {\r\n\t\t\t\treturn func()\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\treturn func()\r\n\t\t}\r\n\t}\r\n\r\n\t// Render the page.\r\n\t// If it's a server-side rendering case then that will be the\r\n\t// first pass, without loading data, just for `React.hydrate()`.\r\n\t// If it's a client-side rendering case then that will be the\r\n\t// first pass with loading data.\r\n\r\n\treturn clientSideRender({\r\n\t\trootComponent: settings.rootComponent,\r\n\t\trender,\r\n\t\trenderParameters: {\r\n\t\t\tstore\r\n\t\t}\r\n\t}).then(\r\n\t\t// If there was no error then `<Router/>` has been rendered.\r\n\t\t(result) => finishWith(() => onSuccess(result)),\r\n\t\t// If there was an error then `<Router/>` hasn't been rendered.\r\n\t\t(error) => finishWith(() => onError(error))\r\n\t)\r\n}"],"mappings":"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"}