"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = showInitialLoad;
exports.showTimer = exports.onHideListeners = exports.isHidden = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _reactRender2 = _interopRequireDefault(require("../../../client/reactRender.js"));
var _InitialLoad = _interopRequireDefault(require("./InitialLoad.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var onHideListeners = [];
exports.onHideListeners = onHideListeners;
var isHidden = {
  current: false
};
exports.isHidden = isHidden;
var showTimer = {
  current: undefined
};
exports.showTimer = showTimer;
function showInitialLoad(_ref) {
  var Component = _ref.Component,
    showDelay = _ref.showDelay,
    hideAnimationDuration = _ref.hideAnimationDuration;
  var show = function show() {
    var container = document.createElement('div');
    // containers.push(container)

    // Will prepend `element` to `<body/>` (even if `<body/>` is empty).
    // https://stackoverflow.com/questions/2007357/how-to-set-dom-element-as-the-first-child
    document.body.insertBefore(container, document.body.firstChild);

    // const setRef = (ref) => {
    // 	// Update the `ref` that corresponds to the `container`.
    // 	const index = containers.indexOf(container)
    // 	if (index >= 0) {
    // 		refs[index] = ref
    // 	}
    // }

    var _reactRender = (0, _reactRender2["default"])(_react["default"].createElement(_InitialLoad["default"], {
        Component: Component,
        hideAnimationDuration: hideAnimationDuration,
        // ref: setRef,
        onHidden: function onHidden() {
          // https://github.com/facebook/react/issues/21441#issuecomment-833298271
          // ReactDOM.unmountComponentAtNode(container)
          root.unmount();
          document.body.removeChild(container);
        },
        addHiddenListener: function addHiddenListener(listener) {
          if (isHidden.current) {
            listener();
            return function () {};
          }
          onHideListeners.push(listener);
          return function () {
            var i = onHideListeners.indexOf(listener);
            if (i >= 0) {
              onHideListeners.splice(i, 1);
            }
          };
        }
      }), container),
      root = _reactRender.root;
  };
  showTimer.current = setTimeout(show, showDelay);
}
//# sourceMappingURL=showInitialLoad.js.map