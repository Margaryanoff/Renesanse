"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = hideInitialLoad;
var _showInitialLoad = require("./showInitialLoad.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// In cases when the initial page immediately redirects
// to another page (for example, to a "not found" page),
// a `RedirectException` is thrown in `setUpAndRender()` function
// in which case that function re-runs from scratch.
//
// That would result in `showInitialLoad()` function
// getting called multiple times, resulting in it creating
// multiple `<InitialLoadingContainer/>` DOM Elements.
//
// Therefore, when calling `hideInitialLoad()`,
// it should assume there're multiple initial `load`s on a page.

// let containers = []
// let refs = []

function hideInitialLoad() {
  // const container = containers.pop()
  // const ref = refs.pop()
  // ref.setFinishedLoading(() => {
  // 	setTimeout(() => {
  // 		ReactDOM.unmountComponentAtNode(container)
  // 		document.body.removeChild(container)
  // 	}, 160)
  // })
  var _iterator = _createForOfIteratorHelper(_showInitialLoad.onHideListeners),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var onHideListener = _step.value;
      onHideListener();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  _showInitialLoad.isHidden.current = true;
  clearTimeout(_showInitialLoad.showTimer.current);
  _showInitialLoad.showTimer.current = undefined;
}
//# sourceMappingURL=hideInitialLoad.js.map