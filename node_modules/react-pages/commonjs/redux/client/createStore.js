"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createStore;
var _createHistoryProtocol = _interopRequireDefault(require("../../router/client/createHistoryProtocol.js"));
var _store = _interopRequireDefault(require("../store.js"));
var _HttpClient = _interopRequireDefault(require("../HttpClient.js"));
var _normalize = _interopRequireDefault(require("../normalize.js"));
var _cookies = require("../../client/cookies.js");
var _context = require("../../context.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/**
 * Creates a Redux store.
 * @param  {object} settings
 * @param  {object} [options]
 * @return {object} store
 */
function createStore(settings) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _ref = arguments.length > 2 ? arguments[2] : undefined,
    stash = _ref.stash;
  var devtools = options.devtools,
    stats = options.stats,
    onBeforeNavigate = options.onBeforeNavigate,
    onNavigationFinished = options.onPageRendered,
    onStoreCreated = options.onStoreCreated,
    getLoadContext = options.getLoadContext;
  settings = (0, _normalize["default"])(settings);

  // Redux store.
  // This variable is used in `httpClient`,
  // that's why it's declared at the top.
  var store;

  // Create HTTP client (Redux action creator `http` utility)
  var httpClient = (0, _HttpClient["default"])(settings, function () {
    return store;
  }, {
    fetch: fetch
  });

  // Store the reference to `httpClient` in `window` for WebSocket message handlers.
  // WebSocket handlers only run on the client side, so it's fine storing the `httpClient`
  // in `window`.
  window._ReactPages_HttpClient = httpClient;
  var initialState = (0, _context.getFromContext)('App/ReduxStateServerSideSnapshot');

  // Create Redux store
  store = (0, _store["default"])({
    initialState: initialState,
    createHistoryProtocol: _createHistoryProtocol["default"],
    httpClient: httpClient,
    stash: stash,
    settings: settings,
    options: {
      devtools: devtools,
      stats: stats,
      onBeforeNavigate: onBeforeNavigate,
      onNavigationFinished: onNavigationFinished,
      getCookie: _cookies.getCookie,
      context: getLoadContext && getLoadContext({
        dispatch: function dispatch(action) {
          return store.dispatch(action);
        }
      })
    }
  });

  // `onStoreCreated(store)` is called here.
  //
  // For example, client-side-only applications
  // may capture this `store` as `window.store`
  // to call `bindActionCreators()` for all actions (globally).
  //
  // onStoreCreated: store => window.store = store
  //
  // import { bindActionCreators } from 'redux'
  // import actionCreators from './actions'
  // const boundActionCreators = bindActionCreators(actionCreators, window.store.dispatch)
  // export default boundActionCreators
  //
  // Not saying that this is even a "good" practice,
  // more like "legacy code", but still my employer
  // happened to have such binding, so I added this feature.
  // Still this technique cuts down on a lot of redundant "wiring" code.
  //
  if (onStoreCreated) {
    onStoreCreated(store);
  }
  return store;
}
//# sourceMappingURL=createStore.js.map