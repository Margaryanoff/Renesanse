"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createRenderFunctionsForRoutes;
var _react = _interopRequireDefault(require("react"));
var _index = require("../router/index.js");
var _forEachRoute = _interopRequireDefault(require("../router/forEachRoute.js"));
var _forEachLeafRoute = _interopRequireDefault(require("../router/forEachLeafRoute.js"));
var _MetaUpdater = _interopRequireDefault(require("./meta/MetaUpdater.js"));
var _excluded = ["Component", "props"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function createRenderFunctionsForRoutes(routes, _ref) {
  var stash = _ref.stash,
    codeSplit = _ref.codeSplit,
    server = _ref.server;
  var getMetaFunction = function getMetaFunction(route) {
    return codeSplit ? route.meta : route.Component.meta;
  };
  var getShouldPassMetaComponentProperty = function getShouldPassMetaComponentProperty(route) {
    return codeSplit ? route.metaComponentProperty : route.Component.metaComponentProperty;
  };
  var createRenderFunctionForRoute = function createRenderFunctionForRoute(route, _ref2) {
    var routePosition = _ref2.routePosition;
    var meta = getMetaFunction(route);
    var shouldPassMetaComponentProperty = getShouldPassMetaComponentProperty(route);
    return function (_ref3) {
      var Component = _ref3.Component,
        props = _ref3.props,
        rest = _objectWithoutProperties(_ref3, _excluded);
      // * `Component` — The component for the route, if any. `null` if the component has not yet been loaded.
      // * `props` — The default props for the route component, specifically `match` with `data` as an additional property. `null` if `data` have not yet been loaded.
      // * `match` — (not used) `found`'s `Match` object. Includes: `routes`, `context` (contains `dispatch` and `getState()`), etc. https://github.com/4Catalyzer/found/blob/master/src/typeUtils.ts

      if (!Component || !props) {
        // `undefined` indicates that either the `Component` is not loaded yet
        // or the `data` for the route hasn't been loaded yet.
        return undefined;
      }

      // https://4catalyzer.github.io/found/docs/configuration/route-config
      var router = props.router,
        data = props.data;

      // const { params } = match

      var componentProps = {};
      if (data) {
        if (data.redirect) {
          // 307 Temporary Redirect
          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307
          // 308 Permanent Redirect
          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308
          // const redirectStatusCode = data.redirect.statusCode
          var redirectStatusCode = undefined; // is gonna be `302` by default in `found` router.
          throw new _index.RedirectException(data.redirect.url, redirectStatusCode);
        }
        if (data.props) {
          componentProps = _objectSpread(_objectSpread({}, data.props), componentProps);
        }
      }
      var renderComponent = function renderComponent() {
        return _react["default"].createElement(Component, componentProps);
      };
      var renderMetaUpdaterComponent = function renderMetaUpdaterComponent(customProps) {
        return _react["default"].createElement(_MetaUpdater["default"], {
          meta: meta,
          stash: stash,
          routePosition: routePosition,
          props: data && data.props,
          customProps: customProps
        });
      };
      var shouldUpdateMetaInRealTime = !server && meta;
      if (shouldPassMetaComponentProperty) {
        if (shouldUpdateMetaInRealTime) {
          componentProps.Meta = renderMetaUpdaterComponent;
        } else {
          componentProps.Meta = EmptyComponent;
        }
      }
      if (shouldUpdateMetaInRealTime) {
        return _react["default"].createElement(MetaUpdaterAndPageComponent, {
          // Passing `componentElement` as `children` here didn't work
          // because `found` router overrides the `children` of the returned React Element.
          componentElement: renderComponent(),
          metaUpdaterElement: renderMetaUpdaterComponent()
        });
      }
      return renderComponent();
    };
  };

  // Set `render` function on the "root" route `Component`.
  routes[0].render = createRenderFunctionForRoute(routes[0], {
    routePosition: 'root'
  });

  // Set `render` function on the "leaf" route `Component`s.
  (0, _forEachLeafRoute["default"])(routes, function (leafRoute) {
    leafRoute.render = createRenderFunctionForRoute(leafRoute, {
      routePosition: 'leaf'
    });
  });

  // Set up redirects on routes.
  // https://4catalyzer.github.io/found/docs/advanced/redirects/
  (0, _forEachRoute["default"])(routes, function (route) {
    if (route.permanentRedirectTo) {
      route.render = function () {
        // 307 Temporary Redirect
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307
        // 308 Permanent Redirect
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308
        // 301 Moved Permanently (permanent redirect)
        // 302 Found (temporary redirect)
        // https://stackoverflow.com/questions/4764297/difference-between-http-redirect-codes
        // const redirectStatusCode = route.temporaryRedirectTo ? 302 : 301
        var redirectStatusCode = 301;
        throw new _index.RedirectException(route.permanentRedirectTo, redirectStatusCode);
      };
    }
  });

  // // Collect `errorPages` map from routes' `default: true` properties.
  // const defaultErrorPages = {}
  // forEachRoute(routes, (route) => {
  // 	if (route.default) {
  // 		if (route.status) {
  // 			if (defaultErrorPages[route.status]) {
  // 				throw new Error(`[react-pages] There already is a \`default: true\` route for \`status: ${route.status}\`: "${getRoutePath(parentRoutes.concat(route))}"`)
  // 			}
  // 			if (route.path.indexOf(':') >= 0) {
  // 				throw new Error(`[react-pages] A \`default: true\` route's \`path\` can't contain a colon (":")`)
  // 			}
  // 			defaultErrorPages[route.status] = route.path
  // 		}
  // 	}
  // })
}

function EmptyComponent() {
  return null;
}
function MetaUpdaterAndPageComponent(_ref4) {
  var metaUpdaterElement = _ref4.metaUpdaterElement,
    componentElement = _ref4.componentElement,
    children = _ref4.children;
  // https://stackoverflow.com/questions/27290013/how-to-render-multiple-children-without-jsx
  return _react["default"].createElement(_react["default"].Fragment, null, metaUpdaterElement, _react["default"].cloneElement(componentElement, null, children));
}

// function isEqualMeta(a, b) {
// 	if (!a && !b) {
// 		return true
// 	}
// 	if (a && !b || !a && b) {
// 		return false
// 	}
// 	const aKeys = Object.keys(a)
// 	const bKeys = Object.keys(b)
// 	if (aKeys.length !== bKeys.length) {
// 		return false
// 	}
// 	for (const key of aKeys) {
// 		if (Array.isArray(a[key])) {
// 			check that b[key] is an array
// 			compare array lengths
// 			compare array elements
// 		} else if (isObject(a[key])) {
// 			check that b[key] is an object
// 			compare objects
// 		} else {
// 			if (a[key] !== b[key]) {
// 				return false
// 			}
// 		}
// 	}
// 	return true
// }
//# sourceMappingURL=createRenderFunctionsForRoutes.js.map