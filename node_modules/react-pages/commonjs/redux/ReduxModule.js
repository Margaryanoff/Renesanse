"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _naming = require("./naming.js");
var _asynchronous = require("./middleware/asynchronous.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Sometimes modules for one project are imported from another project directory.
// For example, Redux actions from one project may be imported into another project.
// In such cases `Counter` is not enough because Redux event names would collide
// because actions from the first project use different `node_modules` and therefore
// use different `react-pages` modules having their own `Counter`.
// In such cases it's mandatory to pass Redux event name to `.action()` and `.simpleAction()`.
// Otherwise there will be Redux event name collisions.
// Importing packages from two different `node_modules` is not a good practice.
var ReduxModule = /*#__PURE__*/function () {
  function ReduxModule() {
    var namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _naming.generateReduxNamespace)(counter.next());
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ReduxModule);
    this.namespace = namespace;
    this.settings = {
      reduxEventNaming: settings.reduxEventNaming || _naming.DEFAULT_REDUX_EVENT_NAMING,
      reduxPropertyNaming: settings.reduxPropertyNaming || _naming.underscoredToCamelCase
    };
    this.handlers = {};
    this.registered_state_properties = [];
  }

  // Deprecated?
  // Replaces an event handler with a custom one.
  _createClass(ReduxModule, [{
    key: "replace",
    value: function replace(event, handler) {
      if (!Array.isArray(handler)) {
        handler = [handler];
      }
      this.handlers[event] = handler;
    }
  }, {
    key: "on",
    value: function on(namespace, event, handler) {
      if (typeof event === 'function') {
        handler = event;
        event = namespace;
        namespace = undefined;
      } else {
        // Use "success" event name.
        event = this.settings.reduxEventNaming((0, _naming.eventName)(namespace, event))[1];
      }
      if (!this.handlers[event]) {
        this.handlers[event] = [];
      }
      this.handlers[event].push(handler);
    }
  }, {
    key: "action",
    value: function action(event, _action, result, options) {
      if (event && typeof event !== 'string') {
        options = result;
        result = _action;
        _action = event;
        event = undefined;
      }
      // Autogenerate `event` name.
      if (!event) {
        event = (0, _naming.generateReduxEventName)(counter.next());
      }
      options = options || {};
      return createAction(event, _action, result, options, this);
    }
  }, {
    key: "simpleAction",
    value: function simpleAction(event, result) {
      if (event && typeof event !== 'string') {
        result = event;
        event = undefined;
      }
      return this.action(event, undefined, result, {
        sync: true
      });
    }
  }, {
    key: "createReducer",
    value: function createReducer() {
      var _this = this;
      var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Applies a handler based on the Redux action `type`.
      // (is copy & paste'd for all action response handlers)
      return function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        try {
          var _iterator = _createForOfIteratorHelper(_this.handlers[event.type] || []),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var handler = _step.value;
              state = handler(state, _this.getEventData(event));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return state;
        } catch (error) {
          // For some strange reason Redux didn't report
          // these errors to the console, hence the manual `console.error`.
          console.error(error);
          throw error;
        }
      };
    }
  }, {
    key: "reducer",
    value: function reducer() {
      var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var reducer = this.createReducer(initialState);
      // The event names list is used for autogenerated
      // event names conflict detection.
      // See `checkForAutogeneratedEventNameCollision()`.
      reducer._ReactPages_ReduxEventNames = Object.keys(this.handlers);
      return reducer;
    }
  }, {
    key: "getEventData",
    value: function getEventData(event) {
      if (Object.prototype.hasOwnProperty.call(event, _asynchronous.RESULT_ACTION_PROPERTY)) {
        return event[_asynchronous.RESULT_ACTION_PROPERTY];
      } else if (event[_asynchronous.ERROR_ACTION_PROPERTY] !== undefined) {
        return event[_asynchronous.ERROR_ACTION_PROPERTY];
      } else {
        return event;
      }
    }
  }, {
    key: "add_state_properties",
    value: function add_state_properties() {
      this.registered_state_properties.push.apply(this.registered_state_properties, arguments);
    }

    // Public alias.
  }, {
    key: "properties",
    value: function properties() {
      this.add_state_properties.apply(this, arguments);
    }

    // Public alias.
  }, {
    key: "property",
    value: function property() {
      this.add_state_properties.apply(this, arguments);
    }
  }]);
  return ReduxModule;
}(); // Returns Redux action creator.
exports["default"] = ReduxModule;
function createAction(event, action, result, options, redux) {
  var _this2 = this;
  var namespace = redux.namespace;
  var sync = options.sync;

  // If `result` is a property name,
  // then add that property to `connectXxx()`.
  if (typeof result === 'string') {
    redux.add_state_properties(result);
  }
  // If `result` is an object of property getters,
  // then add those properties to `connectXxx()`.
  else if (_typeof(result) === 'object') {
    redux.add_state_properties.apply(redux, _toConsumableArray(Object.keys(result)));
  }

  // Default "on result" handler is a reducer that does nothing.
  // For example, when Redux action result is ignored.
  // (I guess those would be rare cases, like "send log message")
  result = result || function (state) {
    return state;
  };

  // Synchronous action
  if (sync) {
    // Reducer
    redux.on((0, _naming.eventName)(namespace, event), get_action_value_reducer(result));
    // Redux "action creator"
    return function (argument) {
      return _defineProperty({
        type: (0, _naming.eventName)(namespace, event)
      }, _asynchronous.RESULT_ACTION_PROPERTY, argument);
    };
  }

  // Asynchronous action

  // Add Redux reducers handling events:
  //
  //   * pending
  //   * success
  //   * error
  //
  add_asynchronous_action_reducers(redux, namespace, event, get_action_value_reducer(result));

  // Redux "action creator"
  return function () {
    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
      parameters[_key] = arguments[_key];
    }
    return {
      event: (0, _naming.eventName)(namespace, event),
      promise: function promise(_ref2) {
        var http = _ref2.http;
        return action.apply(_this2, parameters)(http);
      }
    };
  };
}

// Adds handlers for:
//
//   * pending
//   * done
//   * failed
//   * reset error
//
function add_asynchronous_action_reducers(redux, namespace, event, result_reducer) {
  var _redux$settings$redux = redux.settings.reduxEventNaming(event),
    _redux$settings$redux2 = _slicedToArray(_redux$settings$redux, 3),
    pending_event_name = _redux$settings$redux2[0],
    success_event_name = _redux$settings$redux2[1],
    error_event_name = _redux$settings$redux2[2];
  var pending_property_name = redux.settings.reduxPropertyNaming(pending_event_name);
  var error_property_name = redux.settings.reduxPropertyNaming(error_event_name);

  // This info will be used in `storeConnector`
  redux.add_state_properties(pending_property_name, error_property_name);

  // When Promise is created: reset result variable, clear `error`, set `pending` flag.
  redux.on((0, _naming.eventName)(namespace, pending_event_name), function (state) {
    state = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, pending_property_name, true));
    // Clear `error`
    delete state[error_property_name];
    return state;
  });

  // When Promise succeeds: clear `pending` flag, set result variable.
  redux.on((0, _naming.eventName)(namespace, success_event_name), function (state, result) {
    state = result_reducer(state, result);
    delete state[pending_property_name];
    return state;
  });

  // When Promise fails, clear `pending` flag and set `error`.
  // Can also clear `error` when no `error` is passed as part of an action.
  redux.on((0, _naming.eventName)(namespace, error_event_name), function (state, error) {
    state = _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, error_property_name, error));
    // Clear `pending` flag
    delete state[pending_property_name];
    return state;
  });
}

// Returns a function
function get_action_value_reducer(reducer) {
  // If `reducer` is a property name,
  // then the reducer will write action value
  // to that property of Redux state.
  if (typeof reducer === 'string') {
    return function (state, value) {
      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, reducer, value));
    };
  }

  // If `reducer` is an object of property getters
  // then those properties will be added to Redux state.
  if (_typeof(reducer) === 'object') {
    return function (state, value) {
      var updated_properties = {};
      for (var _i2 = 0, _Object$keys = Object.keys(reducer); _i2 < _Object$keys.length; _i2++) {
        var property = _Object$keys[_i2];
        updated_properties[property] = reducer[property](value);
        // Don't know why did I previously write it like:
        // updated_properties =
        // {
        // 	...updated_properties,
        // 	...reducer[property](value)
        // }
      }

      return _objectSpread(_objectSpread({}, state), updated_properties);
    };
  }

  // Otherwise `reducer` is `(state, value) => ...`
  return reducer;
}
var Counter = /*#__PURE__*/function () {
  function Counter() {
    _classCallCheck(this, Counter);
    this.counter = 0;
  }
  _createClass(Counter, [{
    key: "next",
    value: function next() {
      if (this.counter < MAX_SAFE_INTEGER) {
        this.counter++;
      } else {
        this.counter = 1;
      }
      return this.counter;
    }
  }]);
  return Counter;
}();
var counter = new Counter();

// `MAX_SAFE_INTEGER` is not supported by older browsers
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
//# sourceMappingURL=ReduxModule.js.map