"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_REDUX_EVENT_NAMING = void 0;
exports.checkForAutogeneratedEventNameCollision = checkForAutogeneratedEventNameCollision;
exports.eventName = eventName;
exports.generateReduxEventName = generateReduxEventName;
exports.generateReduxNamespace = generateReduxNamespace;
exports.isAutogeneratedReduxEventName = isAutogeneratedReduxEventName;
exports.underscoredToCamelCase = underscoredToCamelCase;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Converts `UNDERSCORED_NAMES` to `camelCasedNames`.
// E.g. event `GET_USERS_ERROR` => state.`getUsersError`.
function underscoredToCamelCase(string) {
  return string.split('_').map(function (word, i) {
    var firstLetter = word.slice(0, 1);
    var rest = word.slice(1);
    if (i === 0) {
      firstLetter = firstLetter.toLowerCase();
    } else {
      firstLetter = firstLetter.toUpperCase();
    }
    return firstLetter + rest.toLowerCase();
  }).join('');
}

// Converts `namespace` and `event` into a namespaced event name
function eventName(namespace, event) {
  return namespace ? "".concat(namespace, ": ").concat(event) : event;
}
var DEFAULT_REDUX_EVENT_NAMING = function DEFAULT_REDUX_EVENT_NAMING(event) {
  return ["".concat(event, "_PENDING"), "".concat(event, "_SUCCESS"), "".concat(event, "_ERROR")];
};
exports.DEFAULT_REDUX_EVENT_NAMING = DEFAULT_REDUX_EVENT_NAMING;
function generateReduxNamespace(counter) {
  return "REACT_WEBSITE_".concat(counter);
}
function generateReduxEventName(counter) {
  return "REACT_WEBSITE_ACTION_".concat(counter);
}
function isAutogeneratedReduxEventName(name) {
  // Matches "REACT_WEBSITE_1: REACT_WEBSITE_ACTION_2_PENDING".
  // Matches "REACT_WEBSITE_1: REACT_WEBSITE_ACTION_2".
  // Matches "SLIDESHOW: REACT_WEBSITE_ACTION_3".
  // Matches "SLIDESHOW: REACT_WEBSITE_ACTION_3_ENDING".
  return name.indexOf('REACT_WEBSITE_') >= 0;
}

// Checks for `ReduxModule` autogenerated event names conflicts.
function checkForAutogeneratedEventNameCollision(reducers) {
  var reduxModuleAutogeneratedEventNames = {};
  for (var _i = 0, _Object$keys = Object.keys(reducers); _i < _Object$keys.length; _i++) {
    var reducerName = _Object$keys[_i];
    if (reducers[reducerName]._ReactPages_ReduxEventNames) {
      var autogeneratedReduxEventNames = [];
      var _iterator = _createForOfIteratorHelper(reducers[reducerName]._ReactPages_ReduxEventNames),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _eventName = _step.value;
          if (isAutogeneratedReduxEventName(_eventName)) {
            for (var _i2 = 0, _Object$keys2 = Object.keys(reduxModuleAutogeneratedEventNames); _i2 < _Object$keys2.length; _i2++) {
              var _reducerName = _Object$keys2[_i2];
              if (reduxModuleAutogeneratedEventNames[_reducerName].indexOf(_eventName) >= 0) {
                throw new Error("\"ReduxModule\" autogenerated action \"type\" collision detected for reducers \"".concat(_reducerName, "\" and \"").concat(reducerName, "\" and action \"type\" \"").concat(_eventName, "\". Specify an explicit namespace for any of the two reducers to resolve the conflict."));
              }
            }
            autogeneratedReduxEventNames.push(_eventName);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      reduxModuleAutogeneratedEventNames[reducerName] = autogeneratedReduxEventNames;
    }
  }
}
//# sourceMappingURL=naming.js.map