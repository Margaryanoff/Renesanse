"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _superagent = _interopRequireDefault(require("superagent"));
var _cookies = require("./client/cookies.js");
var _HttpRequest = _interopRequireWildcard(require("./HttpRequest.js"));
var _getDomainFromUrl = _interopRequireDefault(require("./getDomainFromUrl.js"));
var _urlBelongsToDomain = _interopRequireDefault(require("./urlBelongsToDomain.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var HTTP_METHODS = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options'];

// This is an isomorphic (universal) HTTP client
// which works both on Node.js and in the web browser,
// and therefore can be used in Redux actions (for HTTP requests)
var HttpClient = /*#__PURE__*/function () {
  // Constructs a new instance of Http client.
  // Optionally takes an Http Request as a reference to mimic
  // (in this case, cookies, to make authentication work on the server-side).
  function HttpClient() {
    var _this = this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, HttpClient);
    var fetch = options.fetch,
      server = options.server,
      proxy = options.proxy,
      headers = options.headers,
      cookies = options.cookies,
      useCrossDomainCookies = options.useCrossDomainCookies,
      authTokenHeader = options.authTokenHeader,
      onBeforeSend = options.onBeforeSend,
      catchToRetry = options.catchToRetry,
      getAuthToken = options.getAuthToken;
    var shouldParseJsonDates = options.parseDates !== false;
    var transformUrl = options.transformUrl || this.proxyUrl.bind(this);
    this.server = server;
    this.proxy = proxy;

    // `Set-Cookie` HTTP headers
    // (in case any cookies are set)
    // cookiesSetOnServer = new Set()
    this.cookiesSetOnServer = [];

    // "Get cookie value by name" helper (works both on client and server)
    var getCookie = this.server ? function (name) {
      // If this cookie was set dynamically then return it
      var _iterator = _createForOfIteratorHelper(_this.cookiesSetOnServer),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var cookieRaw = _step.value;
          if (cookieRaw.indexOf("".concat(name, "=")) === 0) {
            var _getCookieKeyAndValue = (0, _HttpRequest.getCookieKeyAndValue)(cookieRaw),
              _getCookieKeyAndValue2 = _slicedToArray(_getCookieKeyAndValue, 2),
              key = _getCookieKeyAndValue2[0],
              value = _getCookieKeyAndValue2[1];
            return value;
          }
        }
        // Return the original request cookie
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return cookies[name];
    } : _cookies.getCookie;

    // `superagent` doesn't save cookies by default on the server side.
    // Therefore calling `.agent()` explicitly to enable setting cookies.
    var agent = this.server ? _superagent["default"].agent() : _superagent["default"];

    // Define HTTP methods on this `http` utility instance
    var _iterator2 = _createForOfIteratorHelper(HTTP_METHODS),
      _step2;
    try {
      var _loop = function _loop() {
        var method = _step2.value;
        _this[method] = function (originalUrl, data) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          // `url` will be absolute for server-side
          var url = transformUrl(originalUrl, {
            server: _this.server
          });

          // Is incremented on each retry
          var retryCount = -1;

          // Performs an HTTP request to the given `url`.
          // Can retry itself.
          var performHttpRequest = function performHttpRequest() {
            // Create Http request
            var request = new _HttpRequest["default"](method, url, data, {
              agent: agent,
              shouldParseJsonDates: shouldParseJsonDates,
              onResponseHeaders: options.onResponseHeaders,
              headers: _objectSpread(_objectSpread({}, headers), options.headers),
              useCrossDomainCookies: useCrossDomainCookies && useCrossDomainCookies({
                getDomain: function getDomain() {
                  return (0, _getDomainFromUrl["default"])(url);
                },
                belongsToDomain: function belongsToDomain(domain) {
                  return (0, _urlBelongsToDomain["default"])(url, domain);
                },
                url: url,
                originalUrl: originalUrl
              }),
              onAddCookies: function onAddCookies(cookies) {
                if (_this.server) {
                  // Cookies will be duplicated here
                  // because `superagent.agent()` persists
                  // `Set-Cookie`s between subsequent requests
                  // (i.e. for the same `HttpClient` instance).
                  // Therefore using a `Set` instead of an array.
                  var _iterator3 = _createForOfIteratorHelper(cookies),
                    _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                      var cookie = _step3.value;
                      // this.cookiesSetOnServer.add(cookie)
                      if (_this.cookiesSetOnServer.indexOf(cookie) < 0) {
                        _this.cookiesSetOnServer.push(cookie);
                      }
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                }
              }
            });

            // Sets `Authorization: Bearer ${token}` in HTTP request header
            request.addAuthenticationToken(authTokenHeader, options.authentication, getAuthToken, getCookie, url, originalUrl);

            // On server side, user's cookies are attached to **all** relative "original" URLs
            // so `http.transformUrl(originalUrl)` must not transform relative URLs
            // into absolute URLs, otherwise user's cookies would be leaked to a third party.
            if (_this.server && isRelativeUrl(originalUrl)) {
              request.addCookies(cookies, _this.cookiesSetOnServer);
            }

            // Allows customizing HTTP requests.
            // (for example, setting some HTTP headers,
            //  or changing HTTP request `Content-Type`).
            // https://github.com/catamphetamine/react-website/issues/73
            if (onBeforeSend) {
              onBeforeSend(request.request, {
                url: url,
                originalUrl: originalUrl
              });
            }

            // File upload progress metering
            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
            if (options.progress) {
              request.progress(options.progress);
            }
            return request.send().then(function (response) {
              return response;
            }, function (error) {
              // `superagent` would have already output the error to console
              // console.error(error.stack)
              // Can optionally retry an HTTP request in case of an error
              // (e.g. if a JWT access token expired and has to be refreshed using a "refresh" token).
              // https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
              if (catchToRetry) {
                retryCount++;
                return catchToRetry(error, retryCount, {
                  getCookie: getCookie,
                  http: _this
                }).then(performHttpRequest);
              }
              // HTTP request failed with an `error`
              throw error;
            });
          };
          return performHttpRequest();
        };
      };
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  // Validates the requested URL,
  // and also prepends host and port to it on the server side.
  _createClass(HttpClient, [{
    key: "proxyUrl",
    value: function proxyUrl(url, _ref) {
      var server = _ref.server;
      // Prepend host and port on the server side
      if (this.proxy && server && isRelativeUrl(url)) {
        var protocol = this.proxy.secure ? 'https' : 'http';
        return "".concat(protocol, "://").concat(this.proxy.host, ":").concat(this.proxy.port || '80').concat(url);
      }
      return url;
    }
  }]);
  return HttpClient;
}();
exports["default"] = HttpClient;
function isRelativeUrl(url) {
  // Skip "same protocol" URLs.
  // Example: "//yandex.ru".
  return url[0] === '/' && url[1] !== '/';
}
//# sourceMappingURL=HttpClient.js.map