"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getLocationUrl;
// Returns the relative URL from `location`.
function getLocationUrl(location) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // In a forked version of `farce` — `@catamphetamine/farce` — there's `origin` property in location.
  // // There's no `location.origin` property because all locations are relative.
  // // https://github.com/4Catalyzer/farce#locations-and-location-descriptors
  // if (location.origin) {
  // 	throw new Error('[react-pages] A `location` can\'t contain an `origin` property: all locations must be relative')
  // }

  // `location` argument within this library is always a `farce` location.
  //
  // A `farce` location always has a `search: string` property.
  // https://github.com/4Catalyzer/farce#locations-and-location-descriptors
  //
  // Because `queryMiddleware` is applied, it will also contain a `query: object`
  // which is gonna be a parsed `search` string.
  // So those two could be used interchangeably.
  //
  var pathname = location.pathname;
  var search = location.search || '';
  var hash = location.hash || '';

  // Append `basename` to relative URLs.
  var basename = options.basename || '';
  return "".concat(basename).concat(pathname).concat(search).concat(hash);
}
//# sourceMappingURL=getLocationUrl.js.map