"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.getCookieKeyAndValue = getCookieKeyAndValue;
var _parseDates = _interopRequireDefault(require("./parseDates.js"));
var _isObject = _interopRequireDefault(require("./isObject.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Performs HTTP requests
var HttpRequest = /*#__PURE__*/function () {
  function HttpRequest(method, url, data, options) {
    _classCallCheck(this, HttpRequest);
    var agent = options.agent,
      headers = options.headers,
      useCrossDomainCookies = options.useCrossDomainCookies,
      shouldParseJsonDates = options.shouldParseJsonDates,
      onAddCookies = options.onAddCookies,
      onResponseHeaders = options.onResponseHeaders;
    this.onAddCookies = onAddCookies;

    // Create Http request.
    this.request = agent[method](url);

    // By default, an HTTP request won't send or receive cookies
    // when sending a request to another domain (`credentials: "same-site"`).
    //
    // To override that behavior, define a `settings.http.useCrossDomainCookies()`
    // function that would return `true` for a certain `url` (or `originalUrl`):
    // it would have the same effect as `credentials: "include"` option in `fetch()`
    // and will send and receive cookies when sending a request to another domain.
    // (In an `XMLHttpRequest`, the option is called `withCredentials: true`).
    //
    // Another option is `credentials: "omit"` â€” it won't nethier send nor receive cookies.
    //
    if (useCrossDomainCookies) {
      // https://github.com/visionmedia/superagent/issues/1172#issue-206075764
      this.request = this.request.withCredentials();
    }

    // Attach data to the outgoing HTTP request
    if (data) {
      switch (method) {
        case 'get':
          this.request.query(data);
          break;
        case 'post':
        case 'put':
        case 'patch':
        case 'head':
        case 'options':
          if (hasBinaryData(data)) {
            addMultipartData(this.request, data);
          } else {
            this.request.send(data);
          }
          break;
        case 'delete':
          throw new Error("\"data\" supplied for HTTP DELETE request: ".concat(JSON.stringify(data)));
        default:
          throw new Error("Unknown HTTP method: ".concat(method));
      }
    }

    // Apply HTTP headers
    this.request.set(headers);

    // `true`/`false`
    this.shouldParseJsonDates = shouldParseJsonDates;

    // Can be used for examining HTTP response headers
    // (e.g. Amazon S3 file upload)
    this.onResponseHeaders = onResponseHeaders;
  }

  // Sets `Authorization: Bearer ${token}` in HTTP request header
  _createClass(HttpRequest, [{
    key: "addAuthenticationToken",
    value: function addAuthenticationToken(authTokenHeader, authentication, getAuthToken, getCookie, url, originalUrl) {
      var token;
      if (typeof authentication === 'string') {
        token = authentication;
      } else if (getAuthToken) {
        token = getAuthToken(getCookie, {
          url: url,
          originalUrl: originalUrl
        });
      }
      if (token && authentication !== false) {
        this.request.set(authTokenHeader || 'Authorization', "Bearer ".concat(token));
      }
    }

    // Server side only
    // (copies user authentication cookies to retain session specific data)
  }, {
    key: "addCookies",
    value: function addCookies(cookies, cookiesToAdd) {
      // Merge the initial HTTP request `cookies` and `cookiesToAdd` (a `Set`)
      if (cookiesToAdd.size > 0) {
        cookies = _objectSpread({}, cookies);
        var _iterator = _createForOfIteratorHelper(cookiesToAdd),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var cookieRaw = _step.value;
            var _getCookieKeyAndValue = getCookieKeyAndValue(cookieRaw),
              _getCookieKeyAndValue2 = _slicedToArray(_getCookieKeyAndValue, 2),
              key = _getCookieKeyAndValue2[0],
              value = _getCookieKeyAndValue2[1];
            cookies[key] = value;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (Object.keys(cookies).length > 0) {
        this.request.set('cookie', Object.keys(cookies).map(function (key) {
          return "".concat(key, "=").concat(cookies[key]);
        }).join(';'));
      }
    }

    // File upload progress metering
    // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
  }, {
    key: "progress",
    value: function progress(_progress) {
      this.request.on('progress', function (event) {
        if (event.direction !== 'upload') {
          // Only interested in file upload progress metering
          return;
        }
        if (!event.lengthComputable) {
          // Unable to compute progress information since the total size is unknown
          return;
        }
        _progress(event.percent, event);
      });
    }
  }, {
    key: "send",
    value: function send() {
      var _this = this;
      return this.request.then(function (response) {
        if (_this.onResponseHeaders) {
          _this.onResponseHeaders(response.headers);
        }
        // (on the server)
        // If any cookies were set then track them (for later).
        // `response.headers['set-cookie']` is an array of `String`s.
        if (response.headers['set-cookie']) {
          _this.onAddCookies(response.headers['set-cookie']);
        }
        // If HTTP response status is "204 - No content"
        // (PUT, DELETE) then resolve with an empty result.
        if (response.statusCode !== 204) {
          return _this.getResponseData(response);
        }
      }, function (error) {
        // Infer additional `error` properties from the HTTP response.
        if (error.response) {
          _this.populateErrorDataFromResponse(error, error.response);
        }
        throw error;
      });
    }
  }, {
    key: "populateErrorDataFromResponse",
    value: function populateErrorDataFromResponse(error, response) {
      var responseData = this.getResponseData(response);

      // Set `error.status` to HTTP response status code
      error.status = response.statusCode;
      switch (response.type) {
        // Set error `data` from response body,
        case 'application/json':
        // http://jsonapi.org/
        case 'application/vnd.api+json':
          error.data = responseData;
          // Set the more meaningful message for the error (if available)
          if (error.data.message) {
            error.message = error.data.message;
          }
          break;

        // If the HTTP response was not a JSON object,
        // but rather a text or an HTML page,
        // then include that information in the `error`
        // for future reference (e.g. easier debugging).

        case 'text/plain':
          error.message = responseData;
          break;
        case 'text/html':
          error.html = responseData;
          // Recover the original error message (if any)
          if (response.headers['x-error-message']) {
            error.message = response.headers['x-error-message'];
          }
          // Recover the original error stack trace (if any)
          if (response.headers['x-error-stack-trace']) {
            error.stack = JSON.parse(response.headers['x-error-stack-trace']);
          }
          break;
      }
    }
  }, {
    key: "getResponseData",
    value: function getResponseData(response) {
      switch (response.type) {
        case 'application/json':
        // http://jsonapi.org/
        case 'application/vnd.api+json':
          if (this.shouldParseJsonDates) {
            return (0, _parseDates["default"])(response.body);
          }
          return response.body;

        // case 'text/plain':
        // case 'text/html':
        default:
          return response.text;
      }
    }
  }]);
  return HttpRequest;
}(); // Returns `[key, value]` from a raw cookie string
exports["default"] = HttpRequest;
function getCookieKeyAndValue(cookieRaw) {
  var semicolonIndex = cookieRaw.indexOf(';');
  if (semicolonIndex >= 0) {
    cookieRaw = cookieRaw.slice(0, semicolonIndex);
  }
  return cookieRaw.trim().split('=');
}
function addMultipartData(request, data) {
  for (var _i2 = 0, _Object$keys = Object.keys(data); _i2 < _Object$keys.length; _i2++) {
    var key = _Object$keys[_i2];
    var parameter = data[key];
    // For an `<input type="file"/>` DOM element just take its `.files`
    if (typeof HTMLInputElement !== 'undefined' && parameter instanceof HTMLInputElement) {
      parameter = parameter.files;
    }
    // For a `FileList` parameter (e.g. `multiple` file upload),
    // iterate the `File`s in the `FileList`
    // and add them to the form data as a `[File]` array.
    if (typeof FileList !== 'undefined' && parameter instanceof FileList) {
      var i = 0;
      while (i < parameter.length) {
        request.attach(key, parameter[i]);
        i++;
      }
    } else if (typeof File !== 'undefined' && parameter instanceof File) {
      request.attach(key, parameter);
    } else {
      request.field(key, parameter);
    }
  }
}
function hasBinaryData(data) {
  if (!(0, _isObject["default"])(data)) {
    return false;
  }
  for (var _i3 = 0, _Object$keys2 = Object.keys(data); _i3 < _Object$keys2.length; _i3++) {
    var key = _Object$keys2[_i3];
    var parameter = data[key];
    if (typeof HTMLInputElement !== 'undefined' && parameter instanceof HTMLInputElement) {
      return true;
    }
    if (typeof FileList !== 'undefined' && parameter instanceof FileList) {
      return true;
    }
    // `File` is a subclass of `Blob`
    // https://developer.mozilla.org/en-US/docs/Web/API/Blob
    if (typeof Blob !== 'undefined' && parameter instanceof Blob) {
      return true;
    }
  }
}
//# sourceMappingURL=HttpRequest.js.map