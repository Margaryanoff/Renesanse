"use strict";

exports.__esModule = true;
exports.default = createHistoryEnhancer;

var _redux = require("redux");

var _ActionTypes = _interopRequireDefault(require("./ActionTypes"));

var _createHistoryMiddleware = _interopRequireDefault(require("./createHistoryMiddleware"));

var _createNavigationListenerMiddleware = _interopRequireDefault(require("./createNavigationListenerMiddleware"));

var _ensureLocationMiddleware = _interopRequireDefault(require("./ensureLocationMiddleware"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createHref(location) {
  return {
    type: _ActionTypes.default.CREATE_HREF,
    payload: location
  };
}

function createLocation(location) {
  return {
    type: _ActionTypes.default.CREATE_LOCATION,
    payload: location
  };
}

function createHistoryEnhancer({
  protocol,
  middlewares = []
}) {
  return function historyEnhancer(createStore) {
    return (...args) => {
      const navigationListenerMiddleware = (0, _createNavigationListenerMiddleware.default)();
      const middlewareEnhancer = (0, _redux.applyMiddleware)(_ensureLocationMiddleware.default, navigationListenerMiddleware, ...middlewares, (0, _createHistoryMiddleware.default)(protocol), ...[...middlewares].reverse(), navigationListenerMiddleware);
      const store = middlewareEnhancer(createStore)(...args);
      const boundActionCreators = (0, _redux.bindActionCreators)({
        createHref,
        createLocation
      }, store.dispatch);
      return Object.assign({}, store, {
        farce: Object.assign({}, boundActionCreators, {
          addNavigationListener: navigationListenerMiddleware.addListener
        })
      });
    };
  };
}

module.exports = exports.default;