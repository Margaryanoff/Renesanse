{"ast":null,"code":"import * as Yup from \"yup\";\nexport const editPersonalInfromationInitialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  nickname: \"\",\n  email: \"\",\n  bio: \"\",\n  oldPassword: \"\",\n  newPassword: \"\",\n  newPasswordConfirm: \"\"\n};\nexport const EPIvalidation = Yup.object().shape({\n  firstName: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n  lastName: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n  nickname: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n  email: Yup.string().email().optional(),\n  bio: Yup.string().min(5, \"Min 5 letters\").max(50, \"Max 50 letters\").optional(),\n  oldPassword: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n  newPassword: Yup.string().min(4, \"Password must be 8 characters long\").matches(/[0-9]/, \"Password requires a number\").matches(/[a-z]/, \"Password requires a lowercase letter\"),\n  newPasswordConfirm: Yup.string().oneOf([Yup.ref(\"newPassword\"), null], 'Must match \"New Password\" field value')\n});","map":{"version":3,"names":["Yup","editPersonalInfromationInitialValues","firstName","lastName","nickname","email","bio","oldPassword","newPassword","newPasswordConfirm","EPIvalidation","object","shape","string","min","max","optional","matches","oneOf","ref"],"sources":["/Users/Freed/Desktop/social/src/schema/editInfoSchma.js"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const editPersonalInfromationInitialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    nickname: \"\",\n    email: \"\",\n    bio: \"\",\n    oldPassword: \"\",\n    newPassword: \"\",\n    newPasswordConfirm: \"\",\n};\n\nexport const EPIvalidation = Yup.object().shape({\n    firstName: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n    lastName: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n    nickname: Yup.string().min(4, \"Min 4 letters\").max(20, \"Max 20 letters\").optional(),\n    email: Yup.string().email().optional(),\n    bio: Yup.string().min(5, \"Min 5 letters\").max(50, \"Max 50 letters\").optional(),\n    oldPassword: Yup.string()\n        .min(4, \"Min 4 letters\")\n        .max(20, \"Max 20 letters\")\n        .optional(),\n    newPassword: Yup.string()\n        .min(4, \"Password must be 8 characters long\")\n        .matches(/[0-9]/, \"Password requires a number\")\n        .matches(/[a-z]/, \"Password requires a lowercase letter\"),\n    newPasswordConfirm: Yup.string().oneOf(\n        [Yup.ref(\"newPassword\"), null],\n        'Must match \"New Password\" field value'\n    ),\n});\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,OAAO,MAAMC,oCAAoC,GAAG;EAChDC,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,GAAG,EAAE,EAAE;EACPC,WAAW,EAAE,EAAE;EACfC,WAAW,EAAE,EAAE;EACfC,kBAAkB,EAAE;AACxB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGV,GAAG,CAACW,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;EAC5CV,SAAS,EAAEF,GAAG,CAACa,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAACC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAACC,QAAQ,CAAC,CAAC;EACpFb,QAAQ,EAAEH,GAAG,CAACa,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAACC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAACC,QAAQ,CAAC,CAAC;EACnFZ,QAAQ,EAAEJ,GAAG,CAACa,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAACC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAACC,QAAQ,CAAC,CAAC;EACnFX,KAAK,EAAEL,GAAG,CAACa,MAAM,CAAC,CAAC,CAACR,KAAK,CAAC,CAAC,CAACW,QAAQ,CAAC,CAAC;EACtCV,GAAG,EAAEN,GAAG,CAACa,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAACC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC9ET,WAAW,EAAEP,GAAG,CAACa,MAAM,CAAC,CAAC,CACpBC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CACvBC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CACzBC,QAAQ,CAAC,CAAC;EACfR,WAAW,EAAER,GAAG,CAACa,MAAM,CAAC,CAAC,CACpBC,GAAG,CAAC,CAAC,EAAE,oCAAoC,CAAC,CAC5CG,OAAO,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAC9CA,OAAO,CAAC,OAAO,EAAE,sCAAsC,CAAC;EAC7DR,kBAAkB,EAAET,GAAG,CAACa,MAAM,CAAC,CAAC,CAACK,KAAK,CAClC,CAAClB,GAAG,CAACmB,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,EAC9B,uCACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}